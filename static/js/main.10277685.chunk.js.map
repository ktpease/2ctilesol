{"version":3,"sources":["game/PathLogic.js","game/Tile.js","game/PathNode.js","game/GameTimer.js","game/Game.js","App.js","reportWebVitals.js","index.js"],"names":["checkAllPossibleMatches","board","boardWidth","boardHeight","boardWidthWithEdges","boardHeightWithEdges","validMatches","forEach","tile","char","inRemovalAnim","uncheckedMatchingTiles","i","id","length","push","checkRangeX","checkRangeY","sort","a","b","paths","segment","dir","path","pop","curSegment","at","lastTile","nextTile","includes","splice","indexOf","newPath","map","concat","Tile","props","tileNum","parseInt","isNaN","glyph","className","tileStatusClass","selected","highlighted","hinted","tileColorClass","pointer","fade","onClick","String","fromCodePoint","PathNode","node","nodeClass","index","GameTimer","React","forwardRef","ref","useStopwatch","autoStart","seconds","minutes","hours","start","pause","reset","useImperativeHandle","style","textAlign","toString","padStart","ReactModal","setAppElement","document","getElementById","Game","state","showSettingsModal","useEmoji","allowDeselect","showMatchingTiles","showAllValidMatches","seed","tiles","selectedTile","tileHistory","hintedTiles","allValidMatches","allValidMatchTiles","pathingTiles","pathingTilesAlt","useAltPathingTiles","horizontalTileMap","verticalTileMap","timerRef","createRef","this","checkEmojiMode","generateBoard","navigator","userAgentData","getHighEntropyValues","then","ua","platform","platformVersion","setState","window","test","userAgent","width","height","allValidTiles","newWidth","newHeight","chardupe","finalSeed","seedrandom","int32","seededRng","tileCharUsed","Array","keys","randValue","brands","some","item","brand","mobile","Math","floor","x","y","generateHorizontalMap","generateVerticalMap","checkAllValidMatches","current","Set","flat","tileId","firstTile","secondTile","simplestPath","tileXdelta","tileYdelta","unshift","checkSimplestPath","slice","newTiles","tile1","tile2","line","filter","t","lastMatch","tileMap","renderTileAndPath","_el","reverse","tileobj","boardprefix","handleTileClick","renderHorizontalMap","renderVerticalMap","undoMatch","disabled","isOpen","contentLabel","onRequestClose","hideSettingsModal","shouldCloseOnOverlayClick","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.10277685.chunk.js","sourcesContent":["/**\r\n * Check the simplest (i.e. least amount of segments) nikakudori path between\r\n * two tiles on the provided game board.\r\n *\r\n * This utilizes an iterative depth-first search approach, with special modifications\r\n * to account for the limited amount of line segments.\r\n *\r\n * @param {!number} firstTile The tile index to start from\r\n * @param {!number} secondTile The tile index to end up on\r\n * @param {!{{<id: number, char: number>}}[]} board The tiles\r\n * themselves, which should be (1 + boardWidth + 1) * (1 + boardHeight + 1)\r\n * to account for the edges.\r\n * @param {!number} boardWidth Width of the board, excluding the edges.\r\n * @param {!number} boardHeight Height of the board, excluding the edges.\r\n * @returns {?{{<segment: number[], dir: string>}}[]} An array of line segments showing\r\n * one of the simplest paths. Segments are list of tile indexes in order.\r\n * Dir can be \"U\", \"D\", \"L\", or \"R\".\r\n */\r\nexport function checkSimplestPath(\r\n  firstTile,\r\n  secondTile,\r\n  board,\r\n  boardWidth,\r\n  boardHeight\r\n) {\r\n  if (firstTile === secondTile) return null;\r\n\r\n  const boardWidthWithEdges = boardWidth + 2,\r\n    boardHeightWithEdges = boardHeight + 2;\r\n\r\n  let paths = [],\r\n    simplestPath = null;\r\n\r\n  const tileXdelta =\r\n    (secondTile % boardWidthWithEdges) - (firstTile % boardWidthWithEdges);\r\n  const tileYdelta =\r\n    (secondTile -\r\n      (secondTile % boardWidthWithEdges) -\r\n      (firstTile - (firstTile % boardWidthWithEdges))) /\r\n    boardWidthWithEdges;\r\n\r\n  let DEBUG_pathsEaten = 0;\r\n  console.debug(`tile X delta: ${tileXdelta}`);\r\n  console.debug(`tile Y delta: ${tileYdelta}`);\r\n\r\n  // Do not check opposite direction if in the same row or column.\r\n\r\n  if (tileYdelta !== 0 || tileXdelta > 0) {\r\n    paths.push([{ segment: [firstTile], dir: \"R\" }]);\r\n  }\r\n\r\n  if (tileYdelta !== 0 || tileXdelta < 0) {\r\n    if (tileXdelta < 0) paths.push([{ segment: [firstTile], dir: \"L\" }]);\r\n    else paths.unshift([{ segment: [firstTile], dir: \"L\" }]);\r\n  }\r\n\r\n  if (tileXdelta !== 0 || tileYdelta > 0) {\r\n    if (tileYdelta >= 0) paths.push([{ segment: [firstTile], dir: \"D\" }]);\r\n    else paths.unshift([{ segment: [firstTile], dir: \"D\" }]);\r\n  }\r\n\r\n  if (tileXdelta !== 0 || tileYdelta < 0) {\r\n    if (tileYdelta < 0) paths.push([{ segment: [firstTile], dir: \"U\" }]);\r\n    else paths.push([{ segment: [firstTile], dir: \"U\" }]);\r\n  }\r\n\r\n  while (paths.length > 0) {\r\n    const path = paths.pop();\r\n    DEBUG_pathsEaten++;\r\n\r\n    console.debug(\r\n      `Checking path: ${path.at(-1).segment} | ${path.at(-1).dir} | length: ${\r\n        path.length\r\n      } | queue: ${paths.length}`\r\n    );\r\n\r\n    // If we already found a three-line path, we shouldn't look for more\r\n    // three-line paths.\r\n    if (simplestPath !== null && path.length === 3) {\r\n      console.debug(\"- Looking for less-line paths\");\r\n      continue;\r\n    }\r\n\r\n    const curSegment = path.at(-1);\r\n    const lastTile = curSegment.segment.at(-1);\r\n    let nextTile;\r\n\r\n    switch (curSegment.dir) {\r\n      case \"R\":\r\n        nextTile = board[lastTile + 1];\r\n\r\n        // We found the path, or a simpler one!\r\n        if (nextTile.id === secondTile) {\r\n          console.debug(\"- Found simplest path?\");\r\n          curSegment.segment.push(nextTile.id);\r\n\r\n          // If it is a one-line or two-line path, it's one of the\r\n          // absolute shortest paths. We're done!\r\n          if (path.length < 3) {\r\n            console.debug(\"-- It is!\");\r\n            console.debug(`${DEBUG_pathsEaten} PATHS EATEN`);\r\n            return path;\r\n          }\r\n\r\n          console.debug(\"-- Maybe?\");\r\n          simplestPath = path;\r\n          continue;\r\n        }\r\n\r\n        // Obstruction in the path. Skip.\r\n        if (nextTile.char !== null && nextTile.inRemovalAnim !== true) {\r\n          console.debug(\"- Obstruction in path\");\r\n          continue;\r\n        }\r\n\r\n        curSegment.segment.push(nextTile.id);\r\n\r\n        // On first and second segment, check U if second tile is above and\r\n        // check D if the second tile is below.\r\n        // On second segment, only check if on same column.\r\n        if (\r\n          path.length < 3 &&\r\n          !(\r\n            path.length === 2 &&\r\n            secondTile % boardWidthWithEdges !==\r\n              nextTile.id % boardWidthWithEdges\r\n          )\r\n        ) {\r\n          if (\r\n            secondTile - (secondTile % boardWidthWithEdges) <\r\n            nextTile.id - (nextTile.id % boardWidthWithEdges)\r\n          ) {\r\n            console.debug(\"- Add path U\");\r\n            const newPath = path.map((i) => ({\r\n              segment: [].concat(i.segment),\r\n              dir: i.dir,\r\n            }));\r\n            newPath.push({ segment: [nextTile.id], dir: \"U\" });\r\n            if (tileYdelta < 0) paths.push(newPath);\r\n            else paths.unshift(newPath);\r\n          } else if (\r\n            secondTile - (secondTile % boardWidthWithEdges) >\r\n            nextTile.id - (nextTile.id % boardWidthWithEdges)\r\n          ) {\r\n            console.debug(\"- Add path D\");\r\n            const newPath = path.map((i) => ({\r\n              segment: [].concat(i.segment),\r\n              dir: i.dir,\r\n            }));\r\n            newPath.push({ segment: [nextTile.id], dir: \"D\" });\r\n            if (tileYdelta >= 0) paths.push(newPath);\r\n            else paths.unshift(newPath);\r\n          }\r\n        }\r\n\r\n        if (\r\n          (path.length === 2 &&\r\n            secondTile % boardWidthWithEdges <\r\n              nextTile.id % boardWidthWithEdges) ||\r\n          nextTile.id % boardWidthWithEdges === boardWidthWithEdges - 1\r\n        ) {\r\n          console.debug(\"- Do not proceed further, will miss\");\r\n          continue;\r\n        }\r\n\r\n        console.debug(\"- Continuing path\");\r\n        if (tileXdelta >= 0) paths.push(path);\r\n        else paths.unshift(path);\r\n        continue;\r\n      case \"L\":\r\n        nextTile = board[lastTile - 1];\r\n\r\n        // We found the path, or a simpler one!\r\n        if (nextTile.id === secondTile) {\r\n          console.debug(\"- Found simplest path\");\r\n          curSegment.segment.push(nextTile.id);\r\n\r\n          // If it is a one-line or two-line path, it's one of the\r\n          // absolute shortest paths. We're done!\r\n          if (path.length < 3) {\r\n            console.debug(\"-- It is!\");\r\n            console.debug(`${DEBUG_pathsEaten} PATHS EATEN`);\r\n            return path;\r\n          }\r\n\r\n          console.debug(\"-- Maybe?\");\r\n          simplestPath = path;\r\n          continue;\r\n        }\r\n\r\n        // Obstruction in the path. Skip.\r\n        if (nextTile.char !== null && nextTile.inRemovalAnim !== true) {\r\n          console.debug(\"- Obstruction in path\");\r\n          continue;\r\n        }\r\n\r\n        curSegment.segment.push(nextTile.id);\r\n\r\n        // On first and second segment, check U if second tile is above and\r\n        // check D if the second tile is below.\r\n        // On second segment, only check if on same column.\r\n        if (\r\n          path.length < 3 &&\r\n          !(\r\n            path.length === 2 &&\r\n            secondTile % boardWidthWithEdges !==\r\n              nextTile.id % boardWidthWithEdges\r\n          )\r\n        ) {\r\n          if (\r\n            secondTile - (secondTile % boardWidthWithEdges) <\r\n            nextTile.id - (nextTile.id % boardWidthWithEdges)\r\n          ) {\r\n            console.debug(\"- Add path U\");\r\n            const newPath = path.map((i) => ({\r\n              segment: [].concat(i.segment),\r\n              dir: i.dir,\r\n            }));\r\n            newPath.push({ segment: [nextTile.id], dir: \"U\" });\r\n            if (tileYdelta < 0) paths.push(newPath);\r\n            else paths.unshift(newPath);\r\n          } else if (\r\n            secondTile - (secondTile % boardWidthWithEdges) >\r\n            nextTile.id - (nextTile.id % boardWidthWithEdges)\r\n          ) {\r\n            console.debug(\"- Add path D\");\r\n            const newPath = path.map((i) => ({\r\n              segment: [].concat(i.segment),\r\n              dir: i.dir,\r\n            }));\r\n            newPath.push({ segment: [nextTile.id], dir: \"D\" });\r\n            if (tileYdelta >= 0) paths.push(newPath);\r\n            else paths.unshift(newPath);\r\n          }\r\n        }\r\n\r\n        if (\r\n          (path.length === 2 &&\r\n            secondTile % boardWidthWithEdges >\r\n              nextTile.id % boardWidthWithEdges) ||\r\n          nextTile.id % boardWidthWithEdges === 0\r\n        ) {\r\n          console.debug(\"- Do not proceed further, will miss\");\r\n          continue;\r\n        }\r\n\r\n        console.debug(\"- Continuing path\");\r\n        if (tileXdelta < 0) paths.push(path);\r\n        else paths.unshift(path);\r\n        continue;\r\n      case \"D\":\r\n        nextTile = board[lastTile + boardWidthWithEdges];\r\n\r\n        // We found the path, or a simpler one!\r\n        if (nextTile.id === secondTile) {\r\n          console.debug(\"- Found simplest path\");\r\n          curSegment.segment.push(nextTile.id);\r\n\r\n          // If it is a one-line or two-line path, it's one of the\r\n          // absolute shortest paths. We're done!\r\n          if (path.length < 3) {\r\n            console.debug(\"-- It is!\");\r\n            console.debug(`${DEBUG_pathsEaten} PATHS EATEN`);\r\n            return path;\r\n          }\r\n\r\n          console.debug(\"-- Maybe?\");\r\n          simplestPath = path;\r\n          continue;\r\n        }\r\n\r\n        // Obstruction in the path. Skip.\r\n        if (nextTile.char !== null && nextTile.inRemovalAnim !== true) {\r\n          console.debug(\"- Obstruction in path\");\r\n          continue;\r\n        }\r\n\r\n        curSegment.segment.push(nextTile.id);\r\n\r\n        // On first and second segment, check L if second tile is left and\r\n        // check R if the second tile is right.\r\n        // On second segment, only check if on same row.\r\n        if (\r\n          path.length < 3 &&\r\n          !(\r\n            path.length === 2 &&\r\n            secondTile - (secondTile % boardWidthWithEdges) !==\r\n              nextTile.id - (nextTile.id % boardWidthWithEdges)\r\n          )\r\n        ) {\r\n          if (\r\n            secondTile % boardWidthWithEdges <\r\n            nextTile.id % boardWidthWithEdges\r\n          ) {\r\n            console.debug(\"- Add path L\");\r\n            const newPath = path.map((i) => ({\r\n              segment: [].concat(i.segment),\r\n              dir: i.dir,\r\n            }));\r\n            newPath.push({ segment: [nextTile.id], dir: \"L\" });\r\n            if (tileXdelta < 0) paths.push(newPath);\r\n            else paths.unshift(newPath);\r\n          } else if (\r\n            secondTile % boardWidthWithEdges >\r\n            nextTile.id % boardWidthWithEdges\r\n          ) {\r\n            console.debug(\"- Add path R\");\r\n            const newPath = path.map((i) => ({\r\n              segment: [].concat(i.segment),\r\n              dir: i.dir,\r\n            }));\r\n            newPath.push({ segment: [nextTile.id], dir: \"R\" });\r\n            if (tileXdelta >= 0) paths.push(newPath);\r\n            else paths.unshift(newPath);\r\n          }\r\n        }\r\n\r\n        if (\r\n          (path.length === 2 &&\r\n            secondTile - (secondTile % boardWidthWithEdges) <\r\n              nextTile.id - (nextTile.id % boardWidthWithEdges)) ||\r\n          nextTile.id >= boardWidthWithEdges * (boardHeightWithEdges - 1)\r\n        ) {\r\n          console.debug(\"- Do not proceed further, will miss\");\r\n          continue;\r\n        }\r\n\r\n        console.debug(\"- Continuing path\");\r\n        if (tileYdelta >= 0) paths.push(path);\r\n        else paths.unshift(path);\r\n        continue;\r\n      case \"U\":\r\n        nextTile = board[lastTile - boardWidthWithEdges];\r\n\r\n        // We found the path, or a simpler one!\r\n        if (nextTile.id === secondTile) {\r\n          console.debug(\"- Found simplest path\");\r\n          curSegment.segment.push(nextTile.id);\r\n\r\n          // If it is a one-line or two-line path, it's one of the\r\n          // absolute shortest paths. We're done!\r\n          if (path.length < 3) {\r\n            console.debug(\"-- It is!\");\r\n            console.debug(`${DEBUG_pathsEaten} PATHS EATEN`);\r\n            return path;\r\n          }\r\n\r\n          console.debug(\"-- Maybe?\");\r\n          simplestPath = path;\r\n          continue;\r\n        }\r\n\r\n        // Obstruction in the path. Skip.\r\n        if (nextTile.char !== null && nextTile.inRemovalAnim !== true) {\r\n          console.debug(\"- Obstruction in path\");\r\n          continue;\r\n        }\r\n\r\n        curSegment.segment.push(nextTile.id);\r\n\r\n        // On first and second segment, check L if second tile is left and\r\n        // check R if the second tile is right.\r\n        // On second segment, only check if on same row.\r\n        if (\r\n          path.length < 3 &&\r\n          !(\r\n            path.length === 2 &&\r\n            secondTile - (secondTile % boardWidthWithEdges) !==\r\n              nextTile.id - (nextTile.id % boardWidthWithEdges)\r\n          )\r\n        ) {\r\n          if (\r\n            secondTile % boardWidthWithEdges <\r\n            nextTile.id % boardWidthWithEdges\r\n          ) {\r\n            console.debug(\"- Add path L\");\r\n            const newPath = path.map((i) => ({\r\n              segment: [].concat(i.segment),\r\n              dir: i.dir,\r\n            }));\r\n            newPath.push({ segment: [nextTile.id], dir: \"L\" });\r\n            if (tileXdelta < 0) paths.push(newPath);\r\n            else paths.unshift(newPath);\r\n          } else if (\r\n            secondTile % boardWidthWithEdges >\r\n            nextTile.id % boardWidthWithEdges\r\n          ) {\r\n            console.debug(\"- Add path R\");\r\n            const newPath = path.map((i) => ({\r\n              segment: [].concat(i.segment),\r\n              dir: i.dir,\r\n            }));\r\n            newPath.push({ segment: [nextTile.id], dir: \"R\" });\r\n            if (tileXdelta >= 0) paths.push(newPath);\r\n            else paths.unshift(newPath);\r\n          }\r\n        }\r\n\r\n        if (\r\n          (path.length === 2 &&\r\n            secondTile - (secondTile % boardWidthWithEdges) >\r\n              nextTile.id - (nextTile.id % boardWidthWithEdges)) ||\r\n          nextTile.id < boardWidthWithEdges\r\n        ) {\r\n          console.debug(\"- Do not proceed further, will miss\");\r\n          continue;\r\n        }\r\n\r\n        console.debug(\"- Continuing path\");\r\n        if (tileYdelta < 0) paths.push(path);\r\n        else paths.unshift(path);\r\n        continue;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  console.debug(`${DEBUG_pathsEaten} PATHS EATEN`);\r\n  return simplestPath;\r\n}\r\n\r\n/**\r\n * Check all valid matches on the current game board.\r\n *\r\n * This utilizes an depth-first search approach, with special modifications\r\n * to account for the limited amount of line segments.\r\n *\r\n * @param {!{{<id: number, char: number>}}[]} board The tiles\r\n * themselves, which should be (1 + boardWidth + 1) * (1 + boardHeight + 1)\r\n * to account for the edges.\r\n * @param {!number} boardWidth Width of the board, excluding the edges.\r\n * @param {!number} boardHeight Height of the board, excluding the edges.\r\n * @returns {?number[][]} An array of valid matching tile ID pairs.\r\n */\r\nexport function checkAllPossibleMatches(board, boardWidth, boardHeight) {\r\n  const boardWidthWithEdges = boardWidth + 2,\r\n    boardHeightWithEdges = boardHeight + 2;\r\n\r\n  let validMatches = [];\r\n\r\n  console.debug(\r\n    `Checking all possible matches for a board with dimensions ${boardWidth} x ${boardHeight}`\r\n  );\r\n\r\n  // Throw out a path for each valid tile.\r\n  board.forEach((tile) => {\r\n    // Ignore missing tiles.\r\n    if (tile.char === null || tile.inRemovalAnim === true) return;\r\n\r\n    // Check each tile for matches against later tiles. We've already checked\r\n    // against earlier tiles in earlier checks.\r\n    let uncheckedMatchingTiles = [];\r\n\r\n    for (let i = tile.id + 1; i < board.length; i++) {\r\n      if (board[i].char === tile.char && board[i].inRemovalAnim === false) {\r\n        uncheckedMatchingTiles.push(i);\r\n      }\r\n    }\r\n\r\n    // No matches to check.\r\n    if (uncheckedMatchingTiles.length === 0) return;\r\n\r\n    console.debug(\r\n      `Checking tile ${tile.id} with tiles ${uncheckedMatchingTiles}`\r\n    );\r\n\r\n    // Get the X and Y ranges to check. This prevents the pathing algorithm\r\n    // from exploring areas it doesn't need to.\r\n    let checkRangeX = [],\r\n      checkRangeY = [];\r\n\r\n    uncheckedMatchingTiles.forEach((tile) => {\r\n      checkRangeX.push(tile % boardWidthWithEdges);\r\n      checkRangeY.push(tile - (tile % boardWidthWithEdges));\r\n    });\r\n\r\n    if (uncheckedMatchingTiles.length > 1) {\r\n      checkRangeX.sort((a, b) => a - b);\r\n      checkRangeY.sort((a, b) => a - b);\r\n    }\r\n\r\n    // Starting paths.\r\n    let paths = [];\r\n\r\n    paths.push([{ segment: [tile.id], dir: \"R\" }]);\r\n    paths.push([{ segment: [tile.id], dir: \"L\" }]);\r\n    paths.push([{ segment: [tile.id], dir: \"U\" }]);\r\n    paths.push([{ segment: [tile.id], dir: \"D\" }]);\r\n\r\n    while (paths.length > 0) {\r\n      const path = paths.pop();\r\n\r\n      const curSegment = path.at(-1);\r\n      const lastTile = curSegment.segment.at(-1);\r\n      let nextTile;\r\n\r\n      switch (curSegment.dir) {\r\n        case \"R\":\r\n          nextTile = board[lastTile + 1];\r\n\r\n          // Did we find a path?\r\n          if (uncheckedMatchingTiles.includes(nextTile.id)) {\r\n            validMatches.push([tile.id, nextTile.id]);\r\n\r\n            uncheckedMatchingTiles.splice(\r\n              uncheckedMatchingTiles.indexOf(nextTile.id),\r\n              1\r\n            );\r\n\r\n            if (uncheckedMatchingTiles.length === 0) break;\r\n\r\n            // Generate new ranges to check\r\n            uncheckedMatchingTiles.forEach((tile) => {\r\n              checkRangeX.push(tile % boardWidthWithEdges);\r\n              checkRangeY.push(tile - (tile % boardWidthWithEdges));\r\n            });\r\n\r\n            if (uncheckedMatchingTiles.length > 1) {\r\n              checkRangeX.sort((a, b) => a - b);\r\n              checkRangeY.sort((a, b) => a - b);\r\n            }\r\n\r\n            continue;\r\n          }\r\n\r\n          // Obstruction in the path. Skip.\r\n          if (nextTile.char !== null && nextTile.inRemovalAnim !== true) {\r\n            continue;\r\n          }\r\n\r\n          curSegment.segment.push(nextTile.id);\r\n\r\n          // Branch out to different segments if necessary.\r\n          // On second segment, only check if on same column.\r\n          if (\r\n            path.length < 3 &&\r\n            !(\r\n              path.length === 2 &&\r\n              !checkRangeX.includes(nextTile.id % boardWidthWithEdges)\r\n            )\r\n          ) {\r\n            if (\r\n              checkRangeY[0] <\r\n              nextTile.id - (nextTile.id % boardWidthWithEdges)\r\n            ) {\r\n              const newPath = path.map((i) => ({\r\n                segment: [].concat(i.segment),\r\n                dir: i.dir,\r\n              }));\r\n              newPath.push({ segment: [nextTile.id], dir: \"U\" });\r\n              paths.push(newPath);\r\n            } else if (\r\n              checkRangeY.at(-1) >\r\n              nextTile.id - (nextTile.id % boardWidthWithEdges)\r\n            ) {\r\n              const newPath = path.map((i) => ({\r\n                segment: [].concat(i.segment),\r\n                dir: i.dir,\r\n              }));\r\n              newPath.push({ segment: [nextTile.id], dir: \"D\" });\r\n              paths.push(newPath);\r\n            }\r\n          }\r\n\r\n          // Path is going too far away from the range or is nearing the edge\r\n          // of the board.\r\n          if (\r\n            (path.length === 2 &&\r\n              checkRangeX.at(-1) < nextTile.id % boardWidthWithEdges) ||\r\n            nextTile.id % boardWidthWithEdges === boardWidthWithEdges - 1\r\n          ) {\r\n            continue;\r\n          }\r\n\r\n          paths.push(path);\r\n          continue;\r\n        case \"L\":\r\n          nextTile = board[lastTile - 1];\r\n\r\n          // Did we find a path?\r\n          if (uncheckedMatchingTiles.includes(nextTile.id)) {\r\n            validMatches.push([tile.id, nextTile.id]);\r\n\r\n            uncheckedMatchingTiles.splice(\r\n              uncheckedMatchingTiles.indexOf(nextTile.id),\r\n              1\r\n            );\r\n\r\n            if (uncheckedMatchingTiles.length === 0) break;\r\n\r\n            // Generate new ranges to check\r\n            uncheckedMatchingTiles.forEach((tile) => {\r\n              checkRangeX.push(tile % boardWidthWithEdges);\r\n              checkRangeY.push(tile - (tile % boardWidthWithEdges));\r\n            });\r\n\r\n            if (uncheckedMatchingTiles.length > 1) {\r\n              checkRangeX.sort((a, b) => a - b);\r\n              checkRangeY.sort((a, b) => a - b);\r\n            }\r\n\r\n            continue;\r\n          }\r\n\r\n          // Obstruction in the path. Skip.\r\n          if (nextTile.char !== null && nextTile.inRemovalAnim !== true) {\r\n            continue;\r\n          }\r\n\r\n          curSegment.segment.push(nextTile.id);\r\n\r\n          // Branch out to different segments if necessary.\r\n          // On second segment, only check if on same column.\r\n          if (\r\n            path.length < 3 &&\r\n            !(\r\n              path.length === 2 &&\r\n              !checkRangeX.includes(nextTile.id % boardWidthWithEdges)\r\n            )\r\n          ) {\r\n            if (\r\n              checkRangeY[0] <\r\n              nextTile.id - (nextTile.id % boardWidthWithEdges)\r\n            ) {\r\n              const newPath = path.map((i) => ({\r\n                segment: [].concat(i.segment),\r\n                dir: i.dir,\r\n              }));\r\n              newPath.push({ segment: [nextTile.id], dir: \"U\" });\r\n              paths.push(newPath);\r\n            } else if (\r\n              checkRangeY.at(-1) >\r\n              nextTile.id - (nextTile.id % boardWidthWithEdges)\r\n            ) {\r\n              const newPath = path.map((i) => ({\r\n                segment: [].concat(i.segment),\r\n                dir: i.dir,\r\n              }));\r\n              newPath.push({ segment: [nextTile.id], dir: \"D\" });\r\n              paths.push(newPath);\r\n            }\r\n          }\r\n\r\n          // Path is going too far away from the range or is nearing the edge\r\n          // of the board.\r\n          if (\r\n            (path.length === 2 &&\r\n              checkRangeX[0] > nextTile.id % boardWidthWithEdges) ||\r\n            nextTile.id % boardWidthWithEdges === 0\r\n          ) {\r\n            continue;\r\n          }\r\n\r\n          paths.push(path);\r\n          continue;\r\n        case \"D\":\r\n          nextTile = board[lastTile + boardWidthWithEdges];\r\n\r\n          // Did we find a path?\r\n          if (uncheckedMatchingTiles.includes(nextTile.id)) {\r\n            validMatches.push([tile.id, nextTile.id]);\r\n\r\n            uncheckedMatchingTiles.splice(\r\n              uncheckedMatchingTiles.indexOf(nextTile.id),\r\n              1\r\n            );\r\n\r\n            if (uncheckedMatchingTiles.length === 0) break;\r\n\r\n            // Generate new ranges to check\r\n            uncheckedMatchingTiles.forEach((tile) => {\r\n              checkRangeX.push(tile % boardWidthWithEdges);\r\n              checkRangeY.push(tile - (tile % boardWidthWithEdges));\r\n            });\r\n\r\n            if (uncheckedMatchingTiles.length > 1) {\r\n              checkRangeX.sort((a, b) => a - b);\r\n              checkRangeY.sort((a, b) => a - b);\r\n            }\r\n\r\n            continue;\r\n          }\r\n\r\n          // Obstruction in the path. Skip.\r\n          if (nextTile.char !== null && nextTile.inRemovalAnim !== true) {\r\n            continue;\r\n          }\r\n\r\n          curSegment.segment.push(nextTile.id);\r\n\r\n          // Branch out to different segments if necessary.\r\n          // On second segment, only check if on same row.\r\n          if (\r\n            path.length < 3 &&\r\n            !(\r\n              path.length === 2 &&\r\n              !checkRangeY.includes(\r\n                nextTile.id - (nextTile.id % boardWidthWithEdges)\r\n              )\r\n            )\r\n          ) {\r\n            if (checkRangeX[0] < nextTile.id % boardWidthWithEdges) {\r\n              const newPath = path.map((i) => ({\r\n                segment: [].concat(i.segment),\r\n                dir: i.dir,\r\n              }));\r\n              newPath.push({ segment: [nextTile.id], dir: \"L\" });\r\n              paths.push(newPath);\r\n            } else if (checkRangeX.at(-1) > nextTile.id % boardWidthWithEdges) {\r\n              const newPath = path.map((i) => ({\r\n                segment: [].concat(i.segment),\r\n                dir: i.dir,\r\n              }));\r\n              newPath.push({ segment: [nextTile.id], dir: \"R\" });\r\n              paths.push(newPath);\r\n            }\r\n          }\r\n\r\n          // Path is going too far away from the range or is nearing the edge\r\n          // of the board.\r\n          if (\r\n            (path.length === 2 &&\r\n              checkRangeY.at(-1) <\r\n                nextTile.id - (nextTile.id % boardWidthWithEdges)) ||\r\n            nextTile.id >= boardWidthWithEdges * (boardHeightWithEdges - 1)\r\n          ) {\r\n            continue;\r\n          }\r\n\r\n          paths.push(path);\r\n          continue;\r\n        case \"U\":\r\n          nextTile = board[lastTile - boardWidthWithEdges];\r\n\r\n          // Did we find a path?\r\n          if (uncheckedMatchingTiles.includes(nextTile.id)) {\r\n            validMatches.push([tile.id, nextTile.id]);\r\n\r\n            uncheckedMatchingTiles.splice(\r\n              uncheckedMatchingTiles.indexOf(nextTile.id),\r\n              1\r\n            );\r\n\r\n            if (uncheckedMatchingTiles.length === 0) break;\r\n\r\n            // Generate new ranges to check\r\n            uncheckedMatchingTiles.forEach((tile) => {\r\n              checkRangeX.push(tile % boardWidthWithEdges);\r\n              checkRangeY.push(tile - (tile % boardWidthWithEdges));\r\n            });\r\n\r\n            if (uncheckedMatchingTiles.length > 1) {\r\n              checkRangeX.sort((a, b) => a - b);\r\n              checkRangeY.sort((a, b) => a - b);\r\n            }\r\n\r\n            continue;\r\n          }\r\n\r\n          // Obstruction in the path. Skip.\r\n          if (nextTile.char !== null && nextTile.inRemovalAnim !== true) {\r\n            continue;\r\n          }\r\n\r\n          curSegment.segment.push(nextTile.id);\r\n\r\n          // Branch out to different segments if necessary.\r\n          // On second segment, only check if on same row.\r\n          if (\r\n            path.length < 3 &&\r\n            !(\r\n              path.length === 2 &&\r\n              !checkRangeY.includes(\r\n                nextTile.id - (nextTile.id % boardWidthWithEdges)\r\n              )\r\n            )\r\n          ) {\r\n            if (checkRangeX[0] < nextTile.id % boardWidthWithEdges) {\r\n              const newPath = path.map((i) => ({\r\n                segment: [].concat(i.segment),\r\n                dir: i.dir,\r\n              }));\r\n              newPath.push({ segment: [nextTile.id], dir: \"L\" });\r\n              paths.push(newPath);\r\n            } else if (checkRangeX.at(-1) > nextTile.id % boardWidthWithEdges) {\r\n              const newPath = path.map((i) => ({\r\n                segment: [].concat(i.segment),\r\n                dir: i.dir,\r\n              }));\r\n              newPath.push({ segment: [nextTile.id], dir: \"R\" });\r\n              paths.push(newPath);\r\n            }\r\n          }\r\n\r\n          // Path is going too far away from the range or is nearing the edge\r\n          // of the board.\r\n          if (\r\n            (path.length === 2 &&\r\n              checkRangeY[0] >\r\n                nextTile.id - (nextTile.id % boardWidthWithEdges)) ||\r\n            nextTile.id < boardWidthWithEdges\r\n          ) {\r\n            continue;\r\n          }\r\n\r\n          paths.push(path);\r\n          continue;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  });\r\n\r\n  return validMatches;\r\n}\r\n","export default function Tile(props) {\r\n  // Number between 0-42, corresponding to the Mahjong Tiles Unicode block.\r\n  const tileNum = parseInt(props.tile, 10);\r\n\r\n  // Check if tile is valid.\r\n  if (isNaN(tileNum) || tileNum < 0 || tileNum >= 43) {\r\n    return props.glyph ? (\r\n      <span className=\"game-tile-glyph game-tile-empty\">&#x1F02B;&#xFE0E;</span>\r\n    ) : (\r\n      <span className=\"game-tile-emoji game-tile-empty\">&#x1F02B;</span>\r\n    );\r\n  }\r\n\r\n  let tileStatusClass = \"\";\r\n\r\n  if (props.selected) tileStatusClass = \"game-tile-selected\";\r\n  else if (props.highlighted) tileStatusClass = \"game-tile-highlighted\";\r\n  else if (props.hinted) tileStatusClass = \"game-tile-hinted\";\r\n\r\n  if (props.glyph) {\r\n    // If the font uses the glyph variant, give them a colorized border.\r\n    let tileColorClass = \"\";\r\n\r\n    if ((tileNum >= 7 && tileNum <= 15) || tileNum === 4) {\r\n      tileColorClass = \"game-tile-glyph-red\";\r\n    } else if ((tileNum >= 16 && tileNum <= 24) || tileNum === 5) {\r\n      tileColorClass = \"game-tile-glyph-green\";\r\n    } else if ((tileNum >= 25 && tileNum <= 33) || tileNum === 6) {\r\n      tileColorClass = \"game-tile-glyph-blue\";\r\n    } else if (tileNum >= 34 && tileNum <= 37) {\r\n      tileColorClass = \"game-tile-glyph-flowers\";\r\n    } else if (tileNum >= 38 && tileNum <= 41) {\r\n      tileColorClass = \"game-tile-glyph-seasons\";\r\n    }\r\n\r\n    return (\r\n      <span\r\n        className={`game-tile-glyph ${tileColorClass} ${tileStatusClass} ${\r\n          props.pointer ? \"game-tile-pointer\" : \"\"\r\n        } ${props.fade ? \"game-tile-anim-fadeout\" : \"\"}`}\r\n        onClick={props.onClick}\r\n      >\r\n        {String.fromCodePoint(0x1f000 + tileNum)}&#xFE0E;\r\n      </span>\r\n    );\r\n  } else {\r\n    return (\r\n      <span\r\n        className={`game-tile-emoji ${tileStatusClass} ${\r\n          props.pointer ? \"game-tile-pointer\" : \"\"\r\n        } ${props.fade ? \"game-tile-anim-fadeout\" : \"\"}`}\r\n        onClick={props.onClick}\r\n      >\r\n        {String.fromCodePoint(0x1f000 + tileNum)}\r\n      </span>\r\n    );\r\n  }\r\n}\r\n","export default function PathNode(props) {\r\n  if (props.node && props.node.length > 0) {\r\n    let nodeClass = \"\";\r\n\r\n    props.node.forEach((dir, index) => {\r\n      if (index === 0) nodeClass = \"game-path-\";\r\n      nodeClass = nodeClass.concat(dir);\r\n    });\r\n\r\n    return <span className={`game-path ${nodeClass} game-path-anim-fadeout`} />;\r\n  }\r\n\r\n  return null;\r\n}\r\n","import React from \"react\";\r\nimport { useStopwatch } from \"react-timer-hook\";\r\n\r\nconst GameTimer = React.forwardRef((props, ref) => {\r\n  const { seconds, minutes, hours, start, pause, reset } = useStopwatch({\r\n    autoStart: true,\r\n  });\r\n\r\n  React.useImperativeHandle(ref, () => ({\r\n    start,\r\n    pause,\r\n    reset,\r\n  }));\r\n\r\n  return (\r\n    <span style={{ textAlign: \"center\" }}>\r\n      {hours.toString().padStart(2, \"0\")}:{minutes.toString().padStart(2, \"0\")}:\r\n      {seconds.toString().padStart(2, \"0\")}\r\n    </span>\r\n  );\r\n});\r\n\r\nexport default GameTimer;\r\n","import React from \"react\";\r\nimport ReactModal from \"react-modal\";\r\nimport seedrandom from \"seedrandom\";\r\n\r\nimport { checkSimplestPath, checkAllPossibleMatches } from \"./PathLogic.js\";\r\n\r\nimport Tile from \"./Tile.js\";\r\nimport PathNode from \"./PathNode.js\";\r\nimport GameTimer from \"./GameTimer.js\";\r\n\r\nimport \"./Game.css\";\r\nimport \"./SettingsModal.css\";\r\nimport \"./GameBar.css\";\r\n\r\nReactModal.setAppElement(document.getElementById(\"root\"));\r\n\r\nexport default class Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      // Settings\r\n      showSettingsModal: false,\r\n      useEmoji: false,\r\n      allowDeselect: true,\r\n      showMatchingTiles: true,\r\n      showAllValidMatches: true,\r\n      // Board Generation Options\r\n      boardWidth: 17,\r\n      boardHeight: 8,\r\n      seed: 1,\r\n      // Tile State\r\n      tiles: [],\r\n      selectedTile: null,\r\n      // Tile History\r\n      tileHistory: [],\r\n      // Tile Hinting\r\n      hintedTiles: [],\r\n      allValidMatches: [],\r\n      allValidMatchTiles: [],\r\n      // Pathing Maps\r\n      pathingTiles: [],\r\n      pathingTilesAlt: [],\r\n      useAltPathingTiles: false,\r\n      // Tile Display Maps\r\n      horizontalTileMap: [],\r\n      verticalTileMap: [],\r\n    };\r\n\r\n    this.timerRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.checkEmojiMode();\r\n    this.generateBoard();\r\n  }\r\n\r\n  checkEmojiMode() {\r\n    // Currently, all majong tiles are Non-RGI with the exception of Red Dragon,\r\n    // and the only system font that supports all of these tiles as emojis is the\r\n    // Segoe UI Emoji family, included in Windows 10+.\r\n    //\r\n    // It is unlikely that future Unicode Emoji specifications will support\r\n    // all tiles as RGI, and I'm unsure if other system font providers will\r\n    // support them. So for now, we'll just assume that only desktop Windows 10+\r\n    // can run the emoji mode.\r\n    //\r\n    // If any other system or custom font providers begin supporting this, just\r\n    // please make sure they're front-facing (looking at you, Noto Emoji).\r\n\r\n    // If we don't care that it breaks previous Windows versions, we can just\r\n    // use the is-windows package. But for compatibility, we'll just use the UA-CH\r\n    // API.\r\n    if (navigator.userAgentData)\r\n      navigator.userAgentData\r\n        .getHighEntropyValues([\"platform\", \"platformVersion\"])\r\n        .then((ua) => {\r\n          if (ua.platform === \"Windows\" && parseInt(ua.platformVersion) >= 10) {\r\n            console.log(\"Windows 10+ detected, using emoji tiles.\");\r\n            this.setState({ useEmoji: true });\r\n          }\r\n        });\r\n    else if (\r\n      window.navigator &&\r\n      /Windows NT \\d{2}/.test(window.navigator.userAgent)\r\n    ) {\r\n      console.log(\"Windows 10+ detected, using emoji tiles.\");\r\n      this.setState({ useEmoji: true });\r\n    }\r\n  }\r\n\r\n  generateBoard(seed, width, height) {\r\n    const tiles = [],\r\n      allValidTiles = [];\r\n\r\n    const newWidth = width ? width : this.state.boardWidth,\r\n      newHeight = height ? height : this.state.boardHeight;\r\n\r\n    let id = 0,\r\n      char = -1,\r\n      chardupe = -1;\r\n\r\n    // Determine if we need to generate a random seed\r\n    // or use a pre-determined one from the seed argument.\r\n    // This will be used in both tile selection and board shuffling.\r\n    const finalSeed = isNaN(parseInt(seed, 10))\r\n      ? seedrandom().int32() >>> 0\r\n      : parseInt(seed, 10) >>> 0;\r\n\r\n    const seededRng = seedrandom(finalSeed);\r\n\r\n    // Generate which tiles are used. This is done by listing all\r\n    // possible tiles (without duplicates), then shuffling with\r\n    // a simple Fisher-Yates shuffle.\r\n    let tileCharUsed = [...Array(34).keys()],\r\n      randValue = 0;\r\n\r\n    // Chrome for Android has a bug where it'll not respect VS15/U+FE0E and\r\n    // always render the Red Dragon tile as emoji. Until it is fixed, replace\r\n    // the Red Dragon with the unused Joker tile.\r\n    if (\r\n      navigator.userAgentData\r\n        ? navigator.userAgentData.brands.some((item) => {\r\n            return item.brand === \"Chromium\";\r\n          }) === true && navigator.userAgentData.mobile === true\r\n        : window.navigator &&\r\n          window.navigator.userAgent.includes(\"Chrome\") &&\r\n          window.navigator.userAgent.includes(\"Mobile\")\r\n    ) {\r\n      tileCharUsed[4] = 42;\r\n    }\r\n\r\n    for (let i = tileCharUsed.length - 1; i > 0; i--) {\r\n      randValue = Math.floor(seededRng() * (i + 1));\r\n\r\n      char = tileCharUsed[i];\r\n      tileCharUsed[i] = tileCharUsed[randValue];\r\n      tileCharUsed[randValue] = char;\r\n    }\r\n\r\n    // Top outer edge.\r\n    for (let x = 0; x < newWidth + 2; x++)\r\n      id = tiles.push({ id: id, char: null, inRemovalAnim: false });\r\n\r\n    // Generate the initial unshuffled layout of tiles.\r\n    for (let y = 0; y < newHeight; y++) {\r\n      // Left outer edge.\r\n      id = tiles.push({ id: id, char: null, inRemovalAnim: false });\r\n\r\n      for (let x = 0; x < newWidth; x++) {\r\n        if ((chardupe = (chardupe + 1) % 4) === 0) {\r\n          char = (char + 1) % tileCharUsed.length;\r\n        }\r\n\r\n        allValidTiles.push(id);\r\n        id = tiles.push({\r\n          id: id,\r\n          char: tileCharUsed[char],\r\n          inRemovalAnim: false,\r\n        });\r\n      }\r\n\r\n      // Right outer edge.\r\n      id = tiles.push({ id: id, char: null, inRemovalAnim: false });\r\n    }\r\n\r\n    // Bottom outer edge.\r\n    for (let x = 0; x < newWidth + 2; x++)\r\n      id = tiles.push({ id: id, char: null, inRemovalAnim: false });\r\n\r\n    // Shuffle the board using a simple Fisher-Yates shuffle.\r\n    for (let i = allValidTiles.length - 1; i > 0; i--) {\r\n      randValue = Math.floor(seededRng() * (i + 1));\r\n\r\n      char = tiles[allValidTiles[i]].char;\r\n      tiles[allValidTiles[i]].char = tiles[allValidTiles[randValue]].char;\r\n      tiles[allValidTiles[randValue]].char = char;\r\n    }\r\n\r\n    console.log(`Game board seed is ${finalSeed}`);\r\n\r\n    this.setState(\r\n      {\r\n        tiles: tiles,\r\n        boardWidth: newWidth,\r\n        boardHeight: newHeight,\r\n        seed: finalSeed,\r\n        selectedTile: null,\r\n        tileHistory: [],\r\n        hintedTiles: [],\r\n        allValidMatches: [],\r\n        pathingTiles: [],\r\n        pathingTilesAlt: [],\r\n        showSettingsModal: false,\r\n      },\r\n      () => {\r\n        this.generateHorizontalMap();\r\n        this.generateVerticalMap();\r\n\r\n        this.checkAllValidMatches();\r\n        this.timerRef.current.reset();\r\n      }\r\n    );\r\n  }\r\n\r\n  checkAllValidMatches() {\r\n    this.setState(\r\n      {\r\n        allValidMatches: checkAllPossibleMatches(\r\n          this.state.tiles,\r\n          this.state.boardWidth,\r\n          this.state.boardHeight\r\n        ),\r\n      },\r\n      () => {\r\n        this.setState({\r\n          allValidMatchTiles: [...new Set(this.state.allValidMatches.flat())],\r\n        });\r\n\r\n        console.log(\r\n          this.state.showAllValidMatches === true\r\n            ? \"Valid Matches: \" +\r\n                this.state.allValidMatches.reduce(\r\n                  (a, b) =>\r\n                    a.concat(\r\n                      `[${(b[0] % (this.state.boardWidth + 2)) - 1 + 1},${\r\n                        (b[0] -\r\n                          (b[0] % (this.state.boardWidth + 2)) -\r\n                          (this.state.boardWidth + 2)) /\r\n                          (this.state.boardWidth + 2) +\r\n                        1\r\n                      } <-> ${(b[1] % (this.state.boardWidth + 2)) - 1 + 1},${\r\n                        (b[1] -\r\n                          (b[1] % (this.state.boardWidth + 2)) -\r\n                          (this.state.boardWidth + 2)) /\r\n                          (this.state.boardWidth + 2) +\r\n                        1\r\n                      }] `\r\n                    ),\r\n                  \"\"\r\n                )\r\n            : \"\"\r\n        );\r\n      }\r\n    );\r\n  }\r\n\r\n  handleTileClick(tileId) {\r\n    // Don't click empty or tiles being removed.\r\n    if (\r\n      this.state.tiles[tileId].char === null ||\r\n      this.state.tiles[tileId].inRemovalAnim === true\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // Clicking the same tile either de-selects the tile or does nothing.\r\n    if (this.state.selectedTile === tileId) {\r\n      if (this.state.allowDeselect === true) {\r\n        this.setState({ selectedTile: null, hintedTiles: [] });\r\n        console.debug(`Unclicked ${tileId}`);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    console.debug(`Clicked ${tileId}`);\r\n\r\n    // If selecting a second tile, check to make sure it matches the first,\r\n    // then check the pathing to see if it's valid, then clear valid matches.\r\n    if (\r\n      this.state.selectedTile !== null &&\r\n      this.state.tiles[tileId].char ===\r\n        this.state.tiles[this.state.selectedTile].char\r\n    ) {\r\n      const path = checkSimplestPath(\r\n        tileId,\r\n        this.state.selectedTile,\r\n        this.state.tiles.slice(),\r\n        this.state.boardWidth,\r\n        this.state.boardHeight\r\n      );\r\n\r\n      if (path !== null) {\r\n        console.debug(path);\r\n\r\n        // Create an updated board, first by removing the tiles in its\r\n        // fadeout animation, then putting the match in that same animation.\r\n        const newTiles = this.state.tiles.slice();\r\n\r\n        newTiles.forEach((tile) => {\r\n          if (tile.inRemovalAnim === true) {\r\n            tile.inRemovalAnim = false;\r\n            tile.char = null;\r\n          }\r\n        });\r\n\r\n        newTiles[tileId].inRemovalAnim = true;\r\n        newTiles[this.state.selectedTile].inRemovalAnim = true;\r\n\r\n        const tileHistory = this.state.tileHistory.slice();\r\n\r\n        tileHistory.push({\r\n          char: this.state.tiles[tileId].char,\r\n          tile1: tileId,\r\n          tile2: this.state.selectedTile,\r\n        });\r\n\r\n        // Generate the pathing tiles for display.\r\n        const pathingTiles = this.state.tiles.map(() => []);\r\n\r\n        path.forEach((line) => {\r\n          line.segment.forEach((node) => {\r\n            pathingTiles[node].push(line.dir);\r\n          });\r\n        });\r\n\r\n        pathingTiles[this.state.selectedTile].push(\"-start\");\r\n        pathingTiles[tileId].push(\"-end\");\r\n\r\n        this.setState(\r\n          {\r\n            tiles: newTiles,\r\n            selectedTile: null,\r\n            tileHistory: tileHistory,\r\n            hintedTiles: [],\r\n          },\r\n          () => {\r\n            this.checkAllValidMatches();\r\n          }\r\n        );\r\n\r\n        // Switch between primary and alternate pathing maps. This is used\r\n        // as a makeshift solution to consecutive matches using the same tile\r\n        // path, as the CSS animation doesn't get reset.\r\n        if (this.state.useAltPathingTiles === true)\r\n          this.setState({\r\n            pathingTiles: this.state.tiles.map(() => []),\r\n            pathingTilesAlt: pathingTiles,\r\n            useAltPathingTiles: false,\r\n          });\r\n        else\r\n          this.setState({\r\n            pathingTiles: pathingTiles,\r\n            pathingTilesAlt: this.state.tiles.map(() => []),\r\n            useAltPathingTiles: true,\r\n          });\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Update the hinting system, if it's enabled.\r\n    if (this.state.showMatchingTiles === true) {\r\n      const hintedTiles = this.state.tiles.filter(\r\n        (t) => t.char === this.state.tiles[tileId].char\r\n      );\r\n\r\n      this.setState({ hintedTiles: hintedTiles, selectedTile: tileId });\r\n      return;\r\n    }\r\n\r\n    this.setState({ selectedTile: tileId });\r\n  }\r\n\r\n  undoMatch() {\r\n    if (this.state.tileHistory.length > 0) {\r\n      const newTiles = this.state.tiles.slice();\r\n      const lastMatch = this.state.tileHistory.pop();\r\n\r\n      newTiles[lastMatch.tile1].char = lastMatch.char;\r\n      newTiles[lastMatch.tile1].inRemovalAnim = false;\r\n\r\n      newTiles[lastMatch.tile2].char = lastMatch.char;\r\n      newTiles[lastMatch.tile2].inRemovalAnim = false;\r\n\r\n      this.setState(\r\n        {\r\n          tiles: newTiles,\r\n          hintedTiles: [],\r\n          pathingTiles: [],\r\n          pathingTilesAlt: [],\r\n          selectedTile: null,\r\n        },\r\n        () => {\r\n          this.checkAllValidMatches();\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  showSettingsModal() {\r\n    this.timerRef.current.pause();\r\n\r\n    this.setState({ showSettingsModal: true });\r\n  }\r\n\r\n  hideSettingsModal() {\r\n    this.timerRef.current.start();\r\n\r\n    this.setState({ showSettingsModal: false });\r\n  }\r\n\r\n  generateHorizontalMap() {\r\n    const tileMap = [];\r\n\r\n    // Standard horizontal board. Used for landscape orientation.\r\n    for (let y = 0; y < this.state.boardHeight + 2; y++) {\r\n      tileMap[y] = this.state.tiles.slice(\r\n        y * (this.state.boardWidth + 2),\r\n        (y + 1) * (this.state.boardWidth + 2)\r\n      );\r\n    }\r\n\r\n    this.setState({ horizontalTileMap: tileMap });\r\n  }\r\n\r\n  renderHorizontalMap() {\r\n    const tileMap = [];\r\n\r\n    if (typeof this.state.horizontalTileMap === \"undefined\") {\r\n      return;\r\n    }\r\n\r\n    for (let y = 0; y < this.state.horizontalTileMap.length; y++) {\r\n      tileMap[y] = (\r\n        <div key={\"board-hori-row\" + y}>\r\n          {this.state.horizontalTileMap[y].map((i) =>\r\n            this.renderTileAndPath(i, \"hori\")\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return tileMap;\r\n  }\r\n\r\n  generateVerticalMap() {\r\n    const tileMap = [];\r\n\r\n    // Rotated vertical board. Used for portrait orientation.\r\n    for (let x = 0; x < this.state.boardWidth + 2; x++) {\r\n      tileMap[x] = this.state.tiles\r\n        .filter((_el, index) => index % (this.state.boardWidth + 2) === x)\r\n        .reverse();\r\n    }\r\n\r\n    this.setState({ verticalTileMap: tileMap });\r\n  }\r\n\r\n  renderVerticalMap() {\r\n    const tileMap = [];\r\n\r\n    if (typeof this.state.verticalTileMap === \"undefined\") {\r\n      return;\r\n    }\r\n\r\n    for (let x = 0; x < this.state.verticalTileMap.length; x++) {\r\n      tileMap[x] = (\r\n        <div key={\"board-vert-row\" + x}>\r\n          {this.state.verticalTileMap[x].map((i) =>\r\n            this.renderTileAndPath(i, \"vert\")\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return tileMap;\r\n  }\r\n\r\n  renderTileAndPath(tileobj, boardprefix) {\r\n    return (\r\n      <span key={boardprefix + \"span\" + tileobj.id}>\r\n        <Tile\r\n          tile={tileobj.char}\r\n          key={boardprefix + \"-\" + tileobj.id}\r\n          glyph={!this.state.useEmoji}\r\n          selected={tileobj.id === this.state.selectedTile}\r\n          hinted={\r\n            this.state.hintedTiles.includes(tileobj) && !tileobj.inRemovalAnim\r\n          }\r\n          highlighted={this.state.allValidMatchTiles.includes(tileobj.id)}\r\n          fade={tileobj.inRemovalAnim}\r\n          onClick={() => this.handleTileClick(tileobj.id)}\r\n        />\r\n        <PathNode\r\n          key={boardprefix + \"-node-\" + tileobj.id}\r\n          node={this.state.pathingTiles[tileobj.id]}\r\n        />\r\n        <PathNode\r\n          key={boardprefix + \"-altnode-\" + tileobj.id}\r\n          node={this.state.pathingTilesAlt[tileobj.id]}\r\n        />\r\n      </span>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div>\r\n          <div\r\n            className={`game-board game-board-horizontal ${\r\n              this.state.useEmoji ? \"game-board-emoji\" : \"game-board-glyph\"\r\n            }`}\r\n          >\r\n            {this.renderHorizontalMap()}\r\n          </div>\r\n          <div\r\n            className={`game-board game-board-vertical ${\r\n              this.state.useEmoji ? \"game-board-emoji\" : \"game-board-glyph\"\r\n            }`}\r\n          >\r\n            {this.renderVerticalMap()}\r\n          </div>\r\n        </div>\r\n        <div className=\"game-bar\">\r\n          <GameTimer ref={this.timerRef} />\r\n          <button\r\n            className={`settings-button ${\r\n              this.state.showSettingsModal ? \"settings-button-opened\" : \"\"\r\n            }`}\r\n            onClick={() => this.showSettingsModal()}\r\n          >\r\n            &#8801;\r\n          </button>\r\n          <button\r\n            className=\"undo-button\"\r\n            onClick={() => this.undoMatch()}\r\n            disabled={this.state.tileHistory.length === 0}\r\n          >\r\n            &#11148;\r\n          </button>\r\n        </div>\r\n\r\n        <ReactModal\r\n          isOpen={this.state.showSettingsModal}\r\n          contentLabel=\"Settings\"\r\n          onRequestClose={() => this.hideSettingsModal()}\r\n          shouldCloseOnOverlayClick={false}\r\n        >\r\n          <div>\r\n            <div>Board #{this.state.seed}</div>\r\n            <button\r\n              onClick={() =>\r\n                this.setState((state) => ({ useEmoji: !state.useEmoji }))\r\n              }\r\n            >\r\n              Change tile type\r\n            </button>\r\n            <button onClick={() => this.generateBoard(this.state.seed)}>\r\n              Reset board\r\n            </button>\r\n            <button\r\n              onClick={() => this.undoMatch()}\r\n              disabled={this.state.tileHistory.length === 0}\r\n            >\r\n              Undo\r\n            </button>\r\n          </div>\r\n          <div>\r\n            <button onClick={() => this.generateBoard(null, 8, 5)}>\r\n              New board (easy)\r\n            </button>\r\n            <button onClick={() => this.generateBoard(null, 12, 7)}>\r\n              New board (medium)\r\n            </button>\r\n            <button onClick={() => this.generateBoard(null, 17, 8)}>\r\n              New board (hard)\r\n            </button>\r\n          </div>\r\n          <button onClick={() => this.hideSettingsModal()}>Close Modal</button>\r\n        </ReactModal>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import './App.css';\n\nimport Game from './game/Game.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}