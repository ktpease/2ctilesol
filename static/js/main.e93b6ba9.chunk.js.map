{"version":3,"sources":["components/Tile.js","components/Game.js","App.js","reportWebVitals.js","index.js"],"names":["Tile","props","tileNum","parseInt","tile","isNaN","glyph","className","tileStatusClass","selected","hinted","tileColorClass","onClick","String","fromCodePoint","Game","state","useEmoji","document","fonts","check","boardWidth","boardHeight","tiles","selectedTile","hintedTiles","showMatchingTiles","this","generateBoard","id","char","y","x","push","setState","tileId","filter","t","tileMap","slice","map","i","renderTile","_el","index","reverse","tileobj","includes","handleTileClick","renderHorizontalMap","renderVerticalMap","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e93b6ba9.chunk.js","sourcesContent":["function Tile(props) {\r\n  // Number between 0-33, corresponding to the Mahjong Tiles Unicode block.\r\n  const tileNum = parseInt(props.tile);\r\n\r\n  // Check if tile is valid.\r\n  if (isNaN(tileNum) || tileNum < 0 || tileNum >= 42)\r\n    return props.glyph ? (\r\n      <span className=\"game-tile-glyph game-tile-empty\">&#x1F02B;&#xFE0E;</span>\r\n    ) : (\r\n      <span className=\"game-tile-emoji game-tile-empty\">&#x1F02B;</span>\r\n    );\r\n\r\n  let tileStatusClass = \"\";\r\n\r\n  if (props.selected) tileStatusClass = \"game-tile-selected\";\r\n  else if (props.hinted) tileStatusClass = \"game-tile-hinted\";\r\n\r\n  if (props.glyph) {\r\n    // If the font uses the glyph variant, give them a colorized border.\r\n    let tileColorClass = \"\";\r\n\r\n    if ((tileNum >= 7 && tileNum <= 15) || tileNum === 4) {\r\n      tileColorClass = \"game-tile-glyph-red\";\r\n    } else if ((tileNum >= 16 && tileNum <= 24) || tileNum === 5) {\r\n      tileColorClass = \"game-tile-glyph-green\";\r\n    } else if ((tileNum >= 25 && tileNum <= 33) || tileNum === 6) {\r\n      tileColorClass = \"game-tile-glyph-blue\";\r\n    } else if (tileNum >= 34 && tileNum <= 37) {\r\n      tileColorClass = \"game-tile-glyph-flowers\";\r\n    } else if (tileNum >= 38 && tileNum <= 41) {\r\n      tileColorClass = \"game-tile-glyph-seasons\";\r\n    }\r\n\r\n    return (\r\n      <span\r\n        className={`game-tile-glyph ${tileColorClass} ${tileStatusClass}`}\r\n        onClick={props.onClick}\r\n      >\r\n        {String.fromCodePoint(0x1f000 + tileNum)}&#xFE0E;\r\n      </span>\r\n    );\r\n  } else {\r\n    return (\r\n      <span\r\n        className={`game-tile-emoji ${tileStatusClass}`}\r\n        onClick={props.onClick}\r\n      >\r\n        {String.fromCodePoint(0x1f000 + tileNum)}\r\n      </span>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tile;\r\n","import React from \"react\";\r\n\r\nimport \"./Game.css\";\r\n\r\nimport Tile from \"./Tile.js\";\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      useEmoji: document.fonts.check(\"12px Segoe UI Emoji\"),\r\n      boardWidth: 17,\r\n      boardHeight: 8,\r\n      tiles: [],\r\n      selectedTile: null,\r\n      hintedTiles: [],\r\n      showMatchingTiles: true,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.generateBoard();\r\n  }\r\n\r\n  generateBoard() {\r\n    const tiles = [];\r\n\r\n    let id = 0,\r\n      char = 0;\r\n\r\n    for (let y = 0; y < this.state.boardHeight; y++) {\r\n      for (var x = 0; x < this.state.boardWidth; x++) {\r\n        id = tiles.push({ id: id, char: char });\r\n        char = (char + 1) % 34;\r\n      }\r\n    }\r\n\r\n    this.setState({ tiles: tiles });\r\n  }\r\n\r\n  handleTileClick(tileId) {\r\n    if (this.state.selectedTile === tileId) {\r\n      return;\r\n    }\r\n\r\n    if (this.state.showMatchingTiles === true) {\r\n      const hintedTiles = this.state.tiles.filter(\r\n        (t) => (t.char === this.state.tiles[tileId].char)\r\n      );\r\n\r\n      this.setState({ hintedTiles: hintedTiles, selectedTile: tileId });\r\n    } else {\r\n      this.setState({ selectedTile: tileId });\r\n    }\r\n  }\r\n\r\n  renderHorizontalMap() {\r\n    const tileMap = [];\r\n\r\n    // Standard horizontal board. Used for landscape orientation.\r\n    for (let y = 0; y < this.state.boardHeight; y++) {\r\n      tileMap[y] = (\r\n        <div key={\"board-hori-row\" + y}>\r\n          {this.state.tiles\r\n            .slice(y * this.state.boardWidth, (y + 1) * this.state.boardWidth)\r\n            .map((i) => this.renderTile(i))}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return tileMap;\r\n  }\r\n\r\n  renderVerticalMap() {\r\n    const tileMap = [];\r\n\r\n    // Rotated vertical board. Used for portrait orientation.\r\n    for (let x = 0; x < this.state.boardWidth; x++) {\r\n      tileMap[x] = (\r\n        <div key={\"board-vert-row\" + x}>\r\n          {this.state.tiles\r\n            .filter((_el, index) => index % 17 === x)\r\n            .reverse()\r\n            .map((i) => this.renderTile(i))}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return tileMap;\r\n  }\r\n\r\n  renderTile(tileobj) {\r\n    return (\r\n      <Tile\r\n        tile={tileobj.char}\r\n        key={tileobj.id}\r\n        glyph={!this.state.useEmoji}\r\n        selected={tileobj.id === this.state.selectedTile}\r\n        hinted={this.state.hintedTiles.includes(tileobj)}\r\n        onClick={() => this.handleTileClick(tileobj.id)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div>\r\n          <div\r\n            className={`game-board game-board-horizontal ${\r\n              this.state.useEmoji ? \"game-board-emoji\" : \"game-board-glyph\"\r\n            }`}\r\n          >\r\n            {this.renderHorizontalMap()}\r\n          </div>\r\n          <div\r\n            className={`game-board game-board-vertical ${\r\n              this.state.useEmoji ? \"game-board-emoji\" : \"game-board-glyph\"\r\n            }`}\r\n          >\r\n            {this.renderVerticalMap()}\r\n          </div>\r\n          <div>\r\n            <button\r\n              onClick={() =>\r\n                this.setState((state) => ({ useEmoji: !state.useEmoji }))\r\n              }\r\n            >\r\n              Change tile type\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import './App.css';\n\nimport Game from './components/Game.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}