{"version":3,"sources":["components/Tile.js","components/Game.js","App.js","reportWebVitals.js","index.js"],"names":["Tile","props","tileNum","parseInt","tile","isNaN","glyph","className","tileColorClass","String","fromCodePoint","Game","state","tiles","boardWidth","boardHeight","useEmoji","document","fonts","check","this","generateBoard","id","char","y","x","push","setState","tileMap","slice","map","i","filter","_el","index","reverse","renderHorizontalMap","renderVerticalMap","onClick","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f9c423c4.chunk.js","sourcesContent":["function Tile(props) {\r\n  const tileNum = parseInt(props.tile);\r\n\r\n  // Check if tile is valid.\r\n  if (isNaN(tileNum) || tileNum < 0 || tileNum >= 34)\r\n    return props.glyph ? (\r\n      <span className=\"game-tile-glyph game-tile-empty\">&#x1F02B;&#xFE0E;</span>\r\n    ) : (\r\n      <span className=\"game-tile-emoji game-tile-empty\">&#x1F02B;</span>\r\n    );\r\n\r\n  if (props.glyph) {\r\n    // If the font uses the glyph variant, give them a colorized border.\r\n    let tileColorClass = \"\";\r\n\r\n    if ((tileNum >= 7 && tileNum <= 15) || tileNum === 4) {\r\n      tileColorClass = \"game-tile-glyph-red\";\r\n    } else if ((tileNum >= 16 && tileNum <= 24) || tileNum === 5) {\r\n      tileColorClass = \"game-tile-glyph-green\";\r\n    } else if ((tileNum >= 25 && tileNum <= 33) || tileNum === 6) {\r\n      tileColorClass = \"game-tile-glyph-blue\";\r\n    }\r\n\r\n    return (\r\n      <span className={`game-tile-glyph ${tileColorClass}`}>\r\n        {String.fromCodePoint(0x1f000 + tileNum)}&#xFE0E;\r\n      </span>\r\n    );\r\n  } else {\r\n    return (\r\n      <span className=\"game-tile-emoji\">\r\n        {String.fromCodePoint(0x1f000 + tileNum)}\r\n      </span>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tile;\r\n","import React from \"react\";\r\n\r\nimport \"./Game.css\";\r\n\r\nimport Tile from \"./Tile.js\";\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      tiles: [],\r\n      boardWidth: 17,\r\n      boardHeight: 8,\r\n      useEmoji: document.fonts.check(\"12px Segoe UI Emoji\")\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.generateBoard();\r\n  }\r\n\r\n  generateBoard() {\r\n    const tiles = [];\r\n\r\n    let id = 0, char = 0;\r\n\r\n    for (let y = 0; y < this.state.boardHeight; y++) {\r\n      for (var x = 0; x < this.state.boardWidth; x++) {\r\n        id = tiles.push({id: id, char: char});\r\n        char = (char + 1) % 34;\r\n      }\r\n    }\r\n\r\n    this.setState({ tiles: tiles });\r\n  }\r\n\r\n  renderHorizontalMap() {\r\n    const tileMap = [];\r\n\r\n    // Standard horizontal board. Used for landscape orientation.\r\n    for (let y = 0; y < this.state.boardHeight; y++) {\r\n      tileMap[y] = (\r\n        <div key={\"board-hori-row\" + y}>\r\n          {this.state.tiles\r\n            .slice(y * this.state.boardWidth, (y + 1) * this.state.boardWidth)\r\n            .map((i) => (\r\n              <Tile tile={i.char} key={i.id} glyph={!this.state.useEmoji} />\r\n            ))}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return tileMap;\r\n  }\r\n\r\n  renderVerticalMap() {\r\n    const tileMap = [];\r\n\r\n    // Rotated vertical board. Used for portrait orientation.\r\n    for (let x = 0; x < this.state.boardWidth; x++) {\r\n      tileMap[x] = (\r\n        <div key={\"board-vert-row\" + x}>\r\n          {this.state.tiles\r\n            .filter((_el, index) => index % 17 === x)\r\n            .reverse()\r\n            .map((i) => (\r\n              <Tile tile={i.char} key={i.id} glyph={!this.state.useEmoji} />\r\n            ))}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return tileMap;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div>\r\n          <div className={`game-board game-board-horizontal ${this.state.useEmoji ? \"game-board-emoji\" : \"game-board-glyph\"}`}>\r\n            {this.renderHorizontalMap()}\r\n          </div>\r\n          <div className={`game-board game-board-vertical ${this.state.useEmoji ? \"game-board-emoji\" : \"game-board-glyph\"}`}>\r\n            {this.renderVerticalMap()}\r\n          </div>\r\n          <div>\r\n            <button onClick={() => this.setState((state) => ({useEmoji: !state.useEmoji}))}>Change tile type</button>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import './App.css';\n\nimport Game from './components/Game.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}