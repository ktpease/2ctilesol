{"version":3,"sources":["components/Tile.js","components/Game.js","App.js","reportWebVitals.js","index.js"],"names":["Tile","props","tileNum","parseInt","tile","isNaN","glyph","className","tileStatusClass","selected","hinted","tileColorClass","pointer","onClick","String","fromCodePoint","Game","state","useEmoji","document","fonts","check","boardWidth","boardHeight","seed","tiles","selectedTile","hintedTiles","showMatchingTiles","allowDeselect","this","generateBoard","allValidTiles","id","char","x","push","y","finalSeed","seedrandom","int32","seededRng","randTile","i","length","Math","floor","console","log","setState","tileId","debug","path","checkValidPath","newTiles","slice","filter","t","firstTile","secondTile","boardWidthWithEdges","boardHeightWithEdges","paths","simplestPath","tileXdelta","tileYdelta","DEBUG_pathsEaten","segment","dir","pop","at","curSegment","lastTile","nextTile","newPath","tileMap","map","renderTile","_el","index","reverse","tileobj","includes","handleTileClick","renderHorizontalMap","renderVerticalMap","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"iTAAe,SAASA,EAAKC,GAE3B,IAAMC,EAAUC,SAASF,EAAMG,KAAM,IAGrC,GAAIC,MAAMH,IAAYA,EAAU,GAAKA,GAAW,GAC9C,OAAOD,EAAMK,MACX,sBAAMC,UAAU,kCAAhB,gCAEA,sBAAMA,UAAU,kCAAhB,0BAGJ,IAAIC,EAAkB,GAKtB,GAHIP,EAAMQ,SAAUD,EAAkB,qBAC7BP,EAAMS,SAAQF,EAAkB,oBAErCP,EAAMK,MAAO,CAEf,IAAIK,EAAiB,GAcrB,OAZKT,GAAW,GAAKA,GAAW,IAAmB,IAAZA,EACrCS,EAAiB,sBACPT,GAAW,IAAMA,GAAW,IAAmB,IAAZA,EAC7CS,EAAiB,wBACPT,GAAW,IAAMA,GAAW,IAAmB,IAAZA,EAC7CS,EAAiB,uBACRT,GAAW,IAAMA,GAAW,GACrCS,EAAiB,0BACRT,GAAW,IAAMA,GAAW,KACrCS,EAAiB,2BAIjB,uBACEJ,UAAS,0BAAqBI,EAArB,YAAuCH,EAAvC,YACPP,EAAMW,QAAU,oBAAsB,IAExCC,QAASZ,EAAMY,QAJjB,UAMGC,OAAOC,cAAc,OAAUb,GANlC,YAUF,OACE,sBACEK,UAAS,0BAAqBC,EAArB,YACPP,EAAMW,QAAU,oBAAsB,IAExCC,QAASZ,EAAMY,QAJjB,SAMGC,OAAOC,cAAc,OAAUb,K,IC6gBzBc,E,kDAxjBb,WAAYf,GAAQ,IAAD,8BACjB,cAAMA,IAEDgB,MAAQ,CACXC,SAAUC,SAASC,MAAMC,MAAM,uBAC/BC,WAAY,GACZC,YAAa,EACbC,KAAM,EACNC,MAAO,GACPC,aAAc,KACdC,YAAa,GACbC,mBAAmB,EACnBC,eAAe,GAZA,E,qDAgBnB,WACEC,KAAKC,cAAc,Q,2BAGrB,SAAcP,GAQZ,IAPA,IAAMC,EAAQ,GACZO,EAAgB,GAEdC,EAAK,EACPC,EAAO,EAGAC,EAAI,EAAGA,EAAIL,KAAKb,MAAMK,WAAa,EAAGa,IAC7CF,EAAKR,EAAMW,KAAK,CAAEH,GAAIA,EAAIC,KAAM,OAGlC,IAAK,IAAIG,EAAI,EAAGA,EAAIP,KAAKb,MAAMM,YAAac,IAAK,CAE/CJ,EAAKR,EAAMW,KAAK,CAAEH,GAAIA,EAAIC,KAAM,OAEhC,IAAK,IAAIC,EAAI,EAAGA,EAAIL,KAAKb,MAAMK,WAAYa,IACzCD,GAAQA,EAAO,GAAK,GACpBF,EAAcI,KAAKH,GACnBA,EAAKR,EAAMW,KAAK,CAAEH,GAAIA,EAAIC,KAAMA,IAIlCD,EAAKR,EAAMW,KAAK,CAAEH,GAAIA,EAAIC,KAAM,OAIlC,IAAK,IAAIC,EAAI,EAAGA,EAAIL,KAAKb,MAAMK,WAAa,EAAGa,IAC7CF,EAAKR,EAAMW,KAAK,CAAEH,GAAIA,EAAIC,KAAM,OAalC,IATA,IAAMI,EAAYjC,MAAMF,SAASqB,EAAM,KACnCe,MAAaC,UAAY,EACzBrC,SAASqB,EAAM,MAAQ,EAErBiB,EAAYF,IAAWD,GAEzBI,EAAW,EAGNC,EAAIX,EAAcY,OAAS,EAAGD,EAAI,EAAGA,IAC5CD,EAAWG,KAAKC,MAAML,KAAeE,EAAI,IAEzCT,EAAOT,EAAMO,EAAcW,IAAIT,KAC/BT,EAAMO,EAAcW,IAAIT,KAAOT,EAAMO,EAAcU,IAAWR,KAC9DT,EAAMO,EAAcU,IAAWR,KAAOA,EAGxCa,QAAQC,IAAR,6BAAkCV,IAElCR,KAAKmB,SAAS,CACZxB,MAAOA,EACPD,KAAMc,EACNZ,aAAc,KACdC,YAAa,O,6BAIjB,SAAgBuB,GAAS,IAAD,OAEtB,GAAIpB,KAAKb,MAAMS,eAAiBwB,EAAhC,CAaA,GAJAH,QAAQI,MAAR,kBAAyBD,IAKK,OAA5BpB,KAAKb,MAAMS,cACXI,KAAKb,MAAMQ,MAAMyB,GAAQhB,OACvBJ,KAAKb,MAAMQ,MAAMK,KAAKb,MAAMS,cAAcQ,KAC5C,CACA,IAAMkB,EAAOtB,KAAKuB,eAAeH,EAAQpB,KAAKb,MAAMS,cAEpD,GAAa,OAAT0B,EAAe,CACjBL,QAAQI,MAAMC,GAEd,IAAME,EAAWxB,KAAKb,MAAMQ,MAAM8B,QAMlC,OAJAD,EAASJ,GAAQhB,KAAO,KACxBoB,EAASxB,KAAKb,MAAMS,cAAcQ,KAAO,UAEzCJ,KAAKmB,SAAS,CAAExB,MAAO6B,EAAU5B,aAAc,KAAMC,YAAa,MAMtE,IAAqC,IAAjCG,KAAKb,MAAMW,kBASfE,KAAKmB,SAAS,CAAEvB,aAAcwB,QAT9B,CACE,IAAMvB,EAAcG,KAAKb,MAAMQ,MAAM+B,QACnC,SAACC,GAAD,OAAOA,EAAEvB,OAAS,EAAKjB,MAAMQ,MAAMyB,GAAQhB,QAG7CJ,KAAKmB,SAAS,CAAEtB,YAAaA,EAAaD,aAAcwB,UAtCvB,IAA7BpB,KAAKb,MAAMY,gBACbC,KAAKmB,SAAS,CAAEvB,aAAc,KAAMC,YAAa,KACjDoB,QAAQI,MAAR,oBAA2BD,O,4BA2CjC,SAAeQ,EAAWC,GACxB,GAAID,IAAcC,EAAY,OAAO,KAErC,IAAMC,EAAsB9B,KAAKb,MAAMK,WAAa,EAClDuC,EAAuB/B,KAAKb,MAAMM,YAAc,EAE9CuC,EAAQ,GACVC,EAAe,KAEXC,EACHL,EAAaC,EAAwBF,EAAYE,EAC9CK,GACHN,EACEA,EAAaC,GACbF,EAAaA,EAAYE,IAC5BA,EAEEM,EAAmB,EACvBnB,QAAQI,MAAR,wBAA+Ba,IAC/BjB,QAAQI,MAAR,wBAA+Bc,KAIZ,IAAfA,GAAoBD,EAAa,IACnCF,EAAM1B,KAAK,CAAC,CAAE+B,QAAS,CAACT,GAAYU,IAAK,QAGxB,IAAfH,GAAoBD,EAAa,IACnCF,EAAM1B,KAAK,CAAC,CAAE+B,QAAS,CAACT,GAAYU,IAAK,QAGxB,IAAfJ,GAAoBC,EAAa,IACnCH,EAAM1B,KAAK,CAAC,CAAE+B,QAAS,CAACT,GAAYU,IAAK,QAGxB,IAAfJ,GAAoBC,EAAa,IACnCH,EAAM1B,KAAK,CAAC,CAAE+B,QAAS,CAACT,GAAYU,IAAK,OAG3C,IAAK,IAAIzB,EAAI,EAAGA,EAAImB,EAAMlB,OAAQD,IAChCI,QAAQI,MAAMW,EAAMnB,IAGtB,KAAOmB,EAAMlB,OAAS,GAAG,CACvB,IAAMQ,EAAOU,EAAMO,MAWnB,GAVAH,IAEAnB,QAAQI,MAAR,yBACoBC,EAAKkB,IAAI,GAAGH,QADhC,cAC6Cf,EAAKkB,IAAI,GAAGF,IADzD,sBAEIhB,EAAKR,OAFT,qBAGekB,EAAMlB,SAKA,OAAjBmB,GAAyC,IAAhBX,EAAKR,OAAlC,CAKA,IAAM2B,EAAanB,EAAKkB,IAAI,GACtBE,EAAWD,EAAWJ,QAAQG,IAAI,GACpCG,OAAQ,EAEZ,OAAQF,EAAWH,KACjB,IAAK,IAIH,IAHAK,EAAW3C,KAAKb,MAAMQ,MAAM+C,EAAW,IAG1BvC,KAAO0B,EAAY,CAM9B,GALAZ,QAAQI,MAAM,0BACdoB,EAAWJ,QAAQ/B,KAAKqC,EAASxC,IAI7BmB,EAAKR,OAAS,EAGhB,OAFAG,QAAQI,MAAM,aACdJ,QAAQI,MAAR,UAAiBe,EAAjB,iBACOd,EAGTL,QAAQI,MAAM,aACdY,EAAeX,EACf,SAIF,GAAsB,OAAlBqB,EAASvC,KAAe,CAC1Ba,QAAQI,MAAM,yBACd,SAQF,GALAoB,EAAWJ,QAAQ/B,KAAKqC,EAASxC,IAM/BmB,EAAKR,OAAS,IAEI,IAAhBQ,EAAKR,QACLe,EAAaC,IACXa,EAASxC,GAAK2B,GAGlB,GAAID,EAAac,EAASxC,GAAI,CAC5Bc,QAAQI,MAAM,gBACd,IAAMuB,EAAUtB,EAAKG,QACrBmB,EAAQtC,KAAK,CAAE+B,QAAS,CAACM,EAASxC,IAAKmC,IAAK,MAC5CN,EAAM1B,KAAKsC,QACN,GAAIf,EAAac,EAASxC,GAAI,CACnCc,QAAQI,MAAM,gBACd,IAAMuB,EAAUtB,EAAKG,QACrBmB,EAAQtC,KAAK,CAAE+B,QAAS,CAACM,EAASxC,IAAKmC,IAAK,MAC5CN,EAAM1B,KAAKsC,GAIf,GACmB,IAAhBtB,EAAKR,QACJe,EAAaC,EACXa,EAASxC,GAAK2B,GAClBa,EAASxC,GAAK2B,IAAwBA,EAAsB,EAC5D,CACAb,QAAQI,MAAM,uCACd,SAGFJ,QAAQI,MAAM,qBACdW,EAAM1B,KAAKgB,GACX,SACF,IAAK,IAIH,IAHAqB,EAAW3C,KAAKb,MAAMQ,MAAM+C,EAAW,IAG1BvC,KAAO0B,EAAY,CAM9B,GALAZ,QAAQI,MAAM,yBACdoB,EAAWJ,QAAQ/B,KAAKqC,EAASxC,IAI7BmB,EAAKR,OAAS,EAGhB,OAFAG,QAAQI,MAAM,aACdJ,QAAQI,MAAR,UAAiBe,EAAjB,iBACOd,EAGTL,QAAQI,MAAM,aACdY,EAAeX,EACf,SAIF,GAAsB,OAAlBqB,EAASvC,KAAe,CAC1Ba,QAAQI,MAAM,yBACd,SAQF,GALAoB,EAAWJ,QAAQ/B,KAAKqC,EAASxC,IAM/BmB,EAAKR,OAAS,IAEI,IAAhBQ,EAAKR,QACLe,EAAaC,IACXa,EAASxC,GAAK2B,GAGlB,GAAID,EAAac,EAASxC,GAAI,CAC5Bc,QAAQI,MAAM,gBACd,IAAMuB,EAAUtB,EAAKG,QACrBmB,EAAQtC,KAAK,CAAE+B,QAAS,CAACM,EAASxC,IAAKmC,IAAK,MAC5CN,EAAM1B,KAAKsC,QACN,GAAIf,EAAac,EAASxC,GAAI,CACnCc,QAAQI,MAAM,gBACd,IAAMuB,EAAUtB,EAAKG,QACrBmB,EAAQtC,KAAK,CAAE+B,QAAS,CAACM,EAASxC,IAAKmC,IAAK,MAC5CN,EAAM1B,KAAKsC,GAIf,GACmB,IAAhBtB,EAAKR,QACJe,EAAaC,EACXa,EAASxC,GAAK2B,GAClBa,EAASxC,GAAK2B,IAAwB,EACtC,CACAb,QAAQI,MAAM,uCACd,SAGFJ,QAAQI,MAAM,qBACdW,EAAM1B,KAAKgB,GACX,SACF,IAAK,IAIH,IAHAqB,EAAW3C,KAAKb,MAAMQ,MAAM+C,EAAWZ,IAG1B3B,KAAO0B,EAAY,CAM9B,GALAZ,QAAQI,MAAM,yBACdoB,EAAWJ,QAAQ/B,KAAKqC,EAASxC,IAI7BmB,EAAKR,OAAS,EAGhB,OAFAG,QAAQI,MAAM,aACdJ,QAAQI,MAAR,UAAiBe,EAAjB,iBACOd,EAGTL,QAAQI,MAAM,aACdY,EAAeX,EACf,SAIF,GAAsB,OAAlBqB,EAASvC,KAAe,CAC1Ba,QAAQI,MAAM,yBACd,SAQF,GALAoB,EAAWJ,QAAQ/B,KAAKqC,EAASxC,IAM/BmB,EAAKR,OAAS,IAEI,IAAhBQ,EAAKR,QACLe,EAAcA,EAAaC,IACzBa,EAASxC,GAAMwC,EAASxC,GAAK2B,GAGjC,GACED,EAAaC,EACba,EAASxC,GAAK2B,EACd,CACAb,QAAQI,MAAM,gBACd,IAAMuB,EAAUtB,EAAKG,QACrBmB,EAAQtC,KAAK,CAAE+B,QAAS,CAACM,EAASxC,IAAKmC,IAAK,MAC5CN,EAAM1B,KAAKsC,QACN,GACLf,EAAaC,EACba,EAASxC,GAAK2B,EACd,CACAb,QAAQI,MAAM,gBACd,IAAMuB,EAAUtB,EAAKG,QACrBmB,EAAQtC,KAAK,CAAE+B,QAAS,CAACM,EAASxC,IAAKmC,IAAK,MAC5CN,EAAM1B,KAAKsC,GAIf,GACmB,IAAhBtB,EAAKR,QAAgBe,EAAac,EAASxC,IAC5CwC,EAASxC,IAAM2B,GAAuBC,EAAuB,GAC7D,CACAd,QAAQI,MAAM,uCACd,SAGFJ,QAAQI,MAAM,qBACdW,EAAM1B,KAAKgB,GACX,SACF,IAAK,IAIH,IAHAqB,EAAW3C,KAAKb,MAAMQ,MAAM+C,EAAWZ,IAG1B3B,KAAO0B,EAAY,CAM9B,GALAZ,QAAQI,MAAM,yBACdoB,EAAWJ,QAAQ/B,KAAKqC,EAASxC,IAI7BmB,EAAKR,OAAS,EAGhB,OAFAG,QAAQI,MAAM,aACdJ,QAAQI,MAAR,UAAiBe,EAAjB,iBACOd,EAGTL,QAAQI,MAAM,aACdY,EAAeX,EACf,SAIF,GAAsB,OAAlBqB,EAASvC,KAAe,CAC1Ba,QAAQI,MAAM,yBACd,SAQF,GALAoB,EAAWJ,QAAQ/B,KAAKqC,EAASxC,IAM/BmB,EAAKR,OAAS,IAEI,IAAhBQ,EAAKR,QACLe,EAAcA,EAAaC,IACzBa,EAASxC,GAAMwC,EAASxC,GAAK2B,GAGjC,GACED,EAAaC,EACba,EAASxC,GAAK2B,EACd,CACAb,QAAQI,MAAM,gBACd,IAAMuB,EAAUtB,EAAKG,QACrBmB,EAAQtC,KAAK,CAAE+B,QAAS,CAACM,EAASxC,IAAKmC,IAAK,MAC5CN,EAAM1B,KAAKsC,QACN,GACLf,EAAaC,EACba,EAASxC,GAAK2B,EACd,CACAb,QAAQI,MAAM,gBACd,IAAMuB,EAAUtB,EAAKG,QACrBmB,EAAQtC,KAAK,CAAE+B,QAAS,CAACM,EAASxC,IAAKmC,IAAK,MAC5CN,EAAM1B,KAAKsC,GAIf,GACmB,IAAhBtB,EAAKR,QAAgBe,EAAac,EAASxC,IAC5CwC,EAASxC,GAAK2B,EACd,CACAb,QAAQI,MAAM,uCACd,SAGFJ,QAAQI,MAAM,qBACdW,EAAM1B,KAAKgB,GACX,eAxRFL,QAAQI,MAAM,iCA+RlB,OADAJ,QAAQI,MAAR,UAAiBe,EAAjB,iBACOH,I,iCAGT,WAIE,IAJqB,IAAD,OACdY,EAAU,GAGPtC,EAAI,EAAGA,EAAIP,KAAKb,MAAMM,YAAac,IAC1CsC,EAAQtC,GACN,8BACGP,KAAKb,MAAMQ,MACT8B,OACElB,EAAI,IAAMP,KAAKb,MAAMK,WAAa,GAAK,GACvCe,EAAI,IAAMP,KAAKb,MAAMK,WAAa,GAAK,GAEzCsD,KAAI,SAACjC,GAAD,OAAO,EAAKkC,WAAWlC,OANtB,iBAAmBN,GAWjC,OAAOsC,I,+BAGT,WAIE,IAJmB,IAAD,OACZA,EAAU,GADE,WAITxC,GACPwC,EAAQxC,GACN,8BACG,EAAKlB,MAAMQ,MACT8B,MACC,EAAKtC,MAAMK,WAAa,GACvB,EAAKL,MAAMK,WAAa,IAAM,EAAKL,MAAMM,YAAc,IAEzDiC,QACC,SAACsB,EAAKC,GAAN,OAAgBA,GAAS,EAAK9D,MAAMK,WAAa,KAAOa,EAAI,KAE7D6C,UACAJ,KAAI,SAACjC,GAAD,OAAO,EAAKkC,WAAWlC,OAVtB,iBAAmBR,IAFxBA,EAAI,EAAGA,EAAIL,KAAKb,MAAMK,WAAYa,IAAM,EAAxCA,GAiBT,OAAOwC,I,wBAGT,SAAWM,GAAU,IAAD,OAClB,OACE,cAACjF,EAAD,CACEI,KAAM6E,EAAQ/C,KAEd5B,OAAQwB,KAAKb,MAAMC,SACnBT,SAAUwE,EAAQhD,KAAOH,KAAKb,MAAMS,aACpChB,OAAQoB,KAAKb,MAAMU,YAAYuD,SAASD,GACxCpE,QAAS,kBAAM,EAAKsE,gBAAgBF,EAAQhD,MAJvCgD,EAAQhD,M,oBASnB,WAAU,IAAD,OACP,OACE,mCACE,gCACE,qBACE1B,UAAS,2CACPuB,KAAKb,MAAMC,SAAW,mBAAqB,oBAF/C,SAKGY,KAAKsD,wBAER,qBACE7E,UAAS,yCACPuB,KAAKb,MAAMC,SAAW,mBAAqB,oBAF/C,SAKGY,KAAKuD,sBAER,gCACE,wBACExE,QAAS,kBACP,EAAKoC,UAAS,SAAChC,GAAD,MAAY,CAAEC,UAAWD,EAAMC,cAFjD,8BAOA,wBAAQL,QAAS,kBAAM,EAAKkB,iBAA5B,uBACA,wBAAQlB,QAAS,kBAAM,EAAKkB,cAAc,EAAKd,MAAMO,OAArD,4BAIF,0CAAaM,KAAKb,MAAMO,iB,GAljBf8D,IAAMC,WCKVC,MARf,WACE,OACE,qBAAKjF,UAAU,MAAf,SACE,cAAC,EAAD,OCKSkF,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjF,SAASkF,eAAe,SAM1BZ,M","file":"static/js/main.0dcb14a9.chunk.js","sourcesContent":["export default function Tile(props) {\r\n  // Number between 0-42, corresponding to the Mahjong Tiles Unicode block.\r\n  const tileNum = parseInt(props.tile, 10);\r\n\r\n  // Check if tile is valid.\r\n  if (isNaN(tileNum) || tileNum < 0 || tileNum >= 42)\r\n    return props.glyph ? (\r\n      <span className=\"game-tile-glyph game-tile-empty\">&#x1F02B;&#xFE0E;</span>\r\n    ) : (\r\n      <span className=\"game-tile-emoji game-tile-empty\">&#x1F02B;</span>\r\n    );\r\n\r\n  let tileStatusClass = \"\";\r\n\r\n  if (props.selected) tileStatusClass = \"game-tile-selected\";\r\n  else if (props.hinted) tileStatusClass = \"game-tile-hinted\";\r\n\r\n  if (props.glyph) {\r\n    // If the font uses the glyph variant, give them a colorized border.\r\n    let tileColorClass = \"\";\r\n\r\n    if ((tileNum >= 7 && tileNum <= 15) || tileNum === 4) {\r\n      tileColorClass = \"game-tile-glyph-red\";\r\n    } else if ((tileNum >= 16 && tileNum <= 24) || tileNum === 5) {\r\n      tileColorClass = \"game-tile-glyph-green\";\r\n    } else if ((tileNum >= 25 && tileNum <= 33) || tileNum === 6) {\r\n      tileColorClass = \"game-tile-glyph-blue\";\r\n    } else if (tileNum >= 34 && tileNum <= 37) {\r\n      tileColorClass = \"game-tile-glyph-flowers\";\r\n    } else if (tileNum >= 38 && tileNum <= 41) {\r\n      tileColorClass = \"game-tile-glyph-seasons\";\r\n    }\r\n\r\n    return (\r\n      <span\r\n        className={`game-tile-glyph ${tileColorClass} ${tileStatusClass} ${\r\n          props.pointer ? \"game-tile-pointer\" : \"\"\r\n        }`}\r\n        onClick={props.onClick}\r\n      >\r\n        {String.fromCodePoint(0x1f000 + tileNum)}&#xFE0E;\r\n      </span>\r\n    );\r\n  } else {\r\n    return (\r\n      <span\r\n        className={`game-tile-emoji ${tileStatusClass} ${\r\n          props.pointer ? \"game-tile-pointer\" : \"\"\r\n        }`}\r\n        onClick={props.onClick}\r\n      >\r\n        {String.fromCodePoint(0x1f000 + tileNum)}\r\n      </span>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport seedrandom from \"seedrandom\";\r\n\r\nimport \"./Game.css\";\r\n\r\nimport Tile from \"./Tile.js\";\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      useEmoji: document.fonts.check(\"12px Segoe UI Emoji\"),\r\n      boardWidth: 17,\r\n      boardHeight: 8,\r\n      seed: 1,\r\n      tiles: [],\r\n      selectedTile: null,\r\n      hintedTiles: [],\r\n      showMatchingTiles: true,\r\n      allowDeselect: true,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.generateBoard(null);\r\n  }\r\n\r\n  generateBoard(seed) {\r\n    const tiles = [],\r\n      allValidTiles = [];\r\n\r\n    let id = 0,\r\n      char = 0;\r\n\r\n    // Top outer edge.\r\n    for (let x = 0; x < this.state.boardWidth + 2; x++)\r\n      id = tiles.push({ id: id, char: null });\r\n\r\n    // Generate the initial unshuffled layout of tiles.\r\n    for (let y = 0; y < this.state.boardHeight; y++) {\r\n      // Left outer edge.\r\n      id = tiles.push({ id: id, char: null });\r\n\r\n      for (let x = 0; x < this.state.boardWidth; x++) {\r\n        char = (char + 1) % 34;\r\n        allValidTiles.push(id);\r\n        id = tiles.push({ id: id, char: char });\r\n      }\r\n\r\n      // Right outer edge.\r\n      id = tiles.push({ id: id, char: null });\r\n    }\r\n\r\n    // Bottom outer edge.\r\n    for (let x = 0; x < this.state.boardWidth + 2; x++)\r\n      id = tiles.push({ id: id, char: null });\r\n\r\n    // Determine if we need to generate a random seed\r\n    // or use a pre-determined one from the seed argument.\r\n    const finalSeed = isNaN(parseInt(seed, 10))\r\n      ? seedrandom().int32() >>> 0\r\n      : parseInt(seed, 10) >>> 0;\r\n\r\n    const seededRng = seedrandom(finalSeed);\r\n\r\n    let randTile = 0;\r\n\r\n    // Shuffle the board using a simple Fisher-Yates shuffle.\r\n    for (let i = allValidTiles.length - 1; i > 0; i--) {\r\n      randTile = Math.floor(seededRng() * (i + 1));\r\n\r\n      char = tiles[allValidTiles[i]].char;\r\n      tiles[allValidTiles[i]].char = tiles[allValidTiles[randTile]].char;\r\n      tiles[allValidTiles[randTile]].char = char;\r\n    }\r\n\r\n    console.log(`Game board seed is ${finalSeed}`);\r\n\r\n    this.setState({\r\n      tiles: tiles,\r\n      seed: finalSeed,\r\n      selectedTile: null,\r\n      hintedTiles: [],\r\n    });\r\n  }\r\n\r\n  handleTileClick(tileId) {\r\n    // Clicking the same tile either de-selects the tile or does nothing.\r\n    if (this.state.selectedTile === tileId) {\r\n      if (this.state.allowDeselect === true) {\r\n        this.setState({ selectedTile: null, hintedTiles: [] });\r\n        console.debug(`Unclicked ${tileId}`);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    console.debug(`Clicked ${tileId}`);\r\n\r\n    // If selecting a second tile, check to make sure it matches the first,\r\n    // then check the pathing to see if it's valid, then clear valid matches.\r\n    if (\r\n      this.state.selectedTile !== null &&\r\n      this.state.tiles[tileId].char ===\r\n        this.state.tiles[this.state.selectedTile].char\r\n    ) {\r\n      const path = this.checkValidPath(tileId, this.state.selectedTile);\r\n\r\n      if (path !== null) {\r\n        console.debug(path);\r\n\r\n        const newTiles = this.state.tiles.slice();\r\n\r\n        newTiles[tileId].char = null;\r\n        newTiles[this.state.selectedTile].char = null;\r\n\r\n        this.setState({ tiles: newTiles, selectedTile: null, hintedTiles: [] });\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Update the hinting system, if it's enabled.\r\n    if (this.state.showMatchingTiles === true) {\r\n      const hintedTiles = this.state.tiles.filter(\r\n        (t) => t.char === this.state.tiles[tileId].char\r\n      );\r\n\r\n      this.setState({ hintedTiles: hintedTiles, selectedTile: tileId });\r\n      return;\r\n    }\r\n\r\n    this.setState({ selectedTile: tileId });\r\n  }\r\n\r\n  checkValidPath(firstTile, secondTile) {\r\n    if (firstTile === secondTile) return null;\r\n\r\n    const boardWidthWithEdges = this.state.boardWidth + 2,\r\n      boardHeightWithEdges = this.state.boardHeight + 2;\r\n\r\n    let paths = [],\r\n      simplestPath = null;\r\n\r\n    const tileXdelta =\r\n      (secondTile % boardWidthWithEdges) - (firstTile % boardWidthWithEdges);\r\n    const tileYdelta =\r\n      (secondTile -\r\n        (secondTile % boardWidthWithEdges) -\r\n        (firstTile - (firstTile % boardWidthWithEdges))) /\r\n      boardWidthWithEdges;\r\n\r\n    let DEBUG_pathsEaten = 0;\r\n    console.debug(`tile X delta: ${tileXdelta}`);\r\n    console.debug(`tile Y delta: ${tileYdelta}`);\r\n\r\n    // Do not check opposite direction if in the same row or column.\r\n\r\n    if (tileYdelta !== 0 || tileXdelta > 0) {\r\n      paths.push([{ segment: [firstTile], dir: \"R\" }]);\r\n    }\r\n\r\n    if (tileYdelta !== 0 || tileXdelta < 0) {\r\n      paths.push([{ segment: [firstTile], dir: \"L\" }]);\r\n    }\r\n\r\n    if (tileXdelta !== 0 || tileYdelta > 0) {\r\n      paths.push([{ segment: [firstTile], dir: \"D\" }]);\r\n    }\r\n\r\n    if (tileXdelta !== 0 || tileYdelta < 0) {\r\n      paths.push([{ segment: [firstTile], dir: \"U\" }]);\r\n    }\r\n\r\n    for (let i = 0; i < paths.length; i++) {\r\n      console.debug(paths[i]);\r\n    }\r\n\r\n    while (paths.length > 0) {\r\n      const path = paths.pop();\r\n      DEBUG_pathsEaten++;\r\n\r\n      console.debug(\r\n        `Checking path: ${path.at(-1).segment} | ${path.at(-1).dir} | length: ${\r\n          path.length\r\n        } | queue: ${paths.length}`\r\n      );\r\n\r\n      // If we already found a three-line path, we shouldn't look for more\r\n      // three-line paths.\r\n      if (simplestPath !== null && path.length === 3) {\r\n        console.debug(\"- Looking for less-line paths\");\r\n        continue;\r\n      }\r\n\r\n      const curSegment = path.at(-1);\r\n      const lastTile = curSegment.segment.at(-1);\r\n      let nextTile;\r\n\r\n      switch (curSegment.dir) {\r\n        case \"R\":\r\n          nextTile = this.state.tiles[lastTile + 1];\r\n\r\n          // We found the path, or a simpler one!\r\n          if (nextTile.id === secondTile) {\r\n            console.debug(\"- Found simplest path?\");\r\n            curSegment.segment.push(nextTile.id);\r\n\r\n            // If it is a one-line or two-line path, it's one of the\r\n            // absolute shortest paths. We're done!\r\n            if (path.length < 3) {\r\n              console.debug(\"-- It is!\");\r\n              console.debug(`${DEBUG_pathsEaten} PATHS EATEN`);\r\n              return path;\r\n            }\r\n\r\n            console.debug(\"-- Maybe?\");\r\n            simplestPath = path;\r\n            continue;\r\n          }\r\n\r\n          // Obstruction in the path. Skip.\r\n          if (nextTile.char !== null) {\r\n            console.debug(\"- Obstruction in path\");\r\n            continue;\r\n          }\r\n\r\n          curSegment.segment.push(nextTile.id);\r\n\r\n          // On first and second segment, check U if second tile is above and\r\n          // check D if the second tile is below.\r\n          // On second segment, only check if on same column.\r\n          if (\r\n            path.length < 3 &&\r\n            !(\r\n              path.length === 2 &&\r\n              secondTile % boardWidthWithEdges !==\r\n                nextTile.id % boardWidthWithEdges\r\n            )\r\n          ) {\r\n            if (secondTile < nextTile.id) {\r\n              console.debug(\"- Add path U\");\r\n              const newPath = path.slice();\r\n              newPath.push({ segment: [nextTile.id], dir: \"U\" });\r\n              paths.push(newPath);\r\n            } else if (secondTile > nextTile.id) {\r\n              console.debug(\"- Add path D\");\r\n              const newPath = path.slice();\r\n              newPath.push({ segment: [nextTile.id], dir: \"D\" });\r\n              paths.push(newPath);\r\n            }\r\n          }\r\n\r\n          if (\r\n            (path.length === 2 &&\r\n              secondTile % boardWidthWithEdges <\r\n                nextTile.id % boardWidthWithEdges) ||\r\n            nextTile.id % boardWidthWithEdges === boardWidthWithEdges - 1\r\n          ) {\r\n            console.debug(\"- Do not proceed further, will miss\");\r\n            continue;\r\n          }\r\n\r\n          console.debug(\"- Continuing path\");\r\n          paths.push(path);\r\n          continue;\r\n        case \"L\":\r\n          nextTile = this.state.tiles[lastTile - 1];\r\n\r\n          // We found the path, or a simpler one!\r\n          if (nextTile.id === secondTile) {\r\n            console.debug(\"- Found simplest path\");\r\n            curSegment.segment.push(nextTile.id);\r\n\r\n            // If it is a one-line or two-line path, it's one of the\r\n            // absolute shortest paths. We're done!\r\n            if (path.length < 3) {\r\n              console.debug(\"-- It is!\");\r\n              console.debug(`${DEBUG_pathsEaten} PATHS EATEN`);\r\n              return path;\r\n            }\r\n\r\n            console.debug(\"-- Maybe?\");\r\n            simplestPath = path;\r\n            continue;\r\n          }\r\n\r\n          // Obstruction in the path. Skip.\r\n          if (nextTile.char !== null) {\r\n            console.debug(\"- Obstruction in path\");\r\n            continue;\r\n          }\r\n\r\n          curSegment.segment.push(nextTile.id);\r\n\r\n          // On first and second segment, check U if second tile is above and\r\n          // check D if the second tile is below.\r\n          // On second segment, only check if on same column.\r\n          if (\r\n            path.length < 3 &&\r\n            !(\r\n              path.length === 2 &&\r\n              secondTile % boardWidthWithEdges !==\r\n                nextTile.id % boardWidthWithEdges\r\n            )\r\n          ) {\r\n            if (secondTile < nextTile.id) {\r\n              console.debug(\"- Add path U\");\r\n              const newPath = path.slice();\r\n              newPath.push({ segment: [nextTile.id], dir: \"U\" });\r\n              paths.push(newPath);\r\n            } else if (secondTile > nextTile.id) {\r\n              console.debug(\"- Add path D\");\r\n              const newPath = path.slice();\r\n              newPath.push({ segment: [nextTile.id], dir: \"D\" });\r\n              paths.push(newPath);\r\n            }\r\n          }\r\n\r\n          if (\r\n            (path.length === 2 &&\r\n              secondTile % boardWidthWithEdges >\r\n                nextTile.id % boardWidthWithEdges) ||\r\n            nextTile.id % boardWidthWithEdges === 0\r\n          ) {\r\n            console.debug(\"- Do not proceed further, will miss\");\r\n            continue;\r\n          }\r\n\r\n          console.debug(\"- Continuing path\");\r\n          paths.push(path);\r\n          continue;\r\n        case \"D\":\r\n          nextTile = this.state.tiles[lastTile + boardWidthWithEdges];\r\n\r\n          // We found the path, or a simpler one!\r\n          if (nextTile.id === secondTile) {\r\n            console.debug(\"- Found simplest path\");\r\n            curSegment.segment.push(nextTile.id);\r\n\r\n            // If it is a one-line or two-line path, it's one of the\r\n            // absolute shortest paths. We're done!\r\n            if (path.length < 3) {\r\n              console.debug(\"-- It is!\");\r\n              console.debug(`${DEBUG_pathsEaten} PATHS EATEN`);\r\n              return path;\r\n            }\r\n\r\n            console.debug(\"-- Maybe?\");\r\n            simplestPath = path;\r\n            continue;\r\n          }\r\n\r\n          // Obstruction in the path. Skip.\r\n          if (nextTile.char !== null) {\r\n            console.debug(\"- Obstruction in path\");\r\n            continue;\r\n          }\r\n\r\n          curSegment.segment.push(nextTile.id);\r\n\r\n          // On first and second segment, check L if second tile is left and\r\n          // check R if the second tile is right.\r\n          // On second segment, only check if on same row.\r\n          if (\r\n            path.length < 3 &&\r\n            !(\r\n              path.length === 2 &&\r\n              secondTile - (secondTile % boardWidthWithEdges) !==\r\n                nextTile.id - (nextTile.id % boardWidthWithEdges)\r\n            )\r\n          ) {\r\n            if (\r\n              secondTile % boardWidthWithEdges <\r\n              nextTile.id % boardWidthWithEdges\r\n            ) {\r\n              console.debug(\"- Add path L\");\r\n              const newPath = path.slice();\r\n              newPath.push({ segment: [nextTile.id], dir: \"L\" });\r\n              paths.push(newPath);\r\n            } else if (\r\n              secondTile % boardWidthWithEdges >\r\n              nextTile.id % boardWidthWithEdges\r\n            ) {\r\n              console.debug(\"- Add path R\");\r\n              const newPath = path.slice();\r\n              newPath.push({ segment: [nextTile.id], dir: \"R\" });\r\n              paths.push(newPath);\r\n            }\r\n          }\r\n\r\n          if (\r\n            (path.length === 2 && secondTile < nextTile.id) ||\r\n            nextTile.id >= boardWidthWithEdges * (boardHeightWithEdges - 1)\r\n          ) {\r\n            console.debug(\"- Do not proceed further, will miss\");\r\n            continue;\r\n          }\r\n\r\n          console.debug(\"- Continuing path\");\r\n          paths.push(path);\r\n          continue;\r\n        case \"U\":\r\n          nextTile = this.state.tiles[lastTile - boardWidthWithEdges];\r\n\r\n          // We found the path, or a simpler one!\r\n          if (nextTile.id === secondTile) {\r\n            console.debug(\"- Found simplest path\");\r\n            curSegment.segment.push(nextTile.id);\r\n\r\n            // If it is a one-line or two-line path, it's one of the\r\n            // absolute shortest paths. We're done!\r\n            if (path.length < 3) {\r\n              console.debug(\"-- It is!\");\r\n              console.debug(`${DEBUG_pathsEaten} PATHS EATEN`);\r\n              return path;\r\n            }\r\n\r\n            console.debug(\"-- Maybe?\");\r\n            simplestPath = path;\r\n            continue;\r\n          }\r\n\r\n          // Obstruction in the path. Skip.\r\n          if (nextTile.char !== null) {\r\n            console.debug(\"- Obstruction in path\");\r\n            continue;\r\n          }\r\n\r\n          curSegment.segment.push(nextTile.id);\r\n\r\n          // On first and second segment, check L if second tile is left and\r\n          // check R if the second tile is right.\r\n          // On second segment, only check if on same row.\r\n          if (\r\n            path.length < 3 &&\r\n            !(\r\n              path.length === 2 &&\r\n              secondTile - (secondTile % boardWidthWithEdges) !==\r\n                nextTile.id - (nextTile.id % boardWidthWithEdges)\r\n            )\r\n          ) {\r\n            if (\r\n              secondTile % boardWidthWithEdges <\r\n              nextTile.id % boardWidthWithEdges\r\n            ) {\r\n              console.debug(\"- Add path L\");\r\n              const newPath = path.slice();\r\n              newPath.push({ segment: [nextTile.id], dir: \"L\" });\r\n              paths.push(newPath);\r\n            } else if (\r\n              secondTile % boardWidthWithEdges >\r\n              nextTile.id % boardWidthWithEdges\r\n            ) {\r\n              console.debug(\"- Add path R\");\r\n              const newPath = path.slice();\r\n              newPath.push({ segment: [nextTile.id], dir: \"R\" });\r\n              paths.push(newPath);\r\n            }\r\n          }\r\n\r\n          if (\r\n            (path.length === 2 && secondTile > nextTile.id) ||\r\n            nextTile.id < boardWidthWithEdges\r\n          ) {\r\n            console.debug(\"- Do not proceed further, will miss\");\r\n            continue;\r\n          }\r\n\r\n          console.debug(\"- Continuing path\");\r\n          paths.push(path);\r\n          continue;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    console.debug(`${DEBUG_pathsEaten} PATHS EATEN`);\r\n    return simplestPath;\r\n  }\r\n\r\n  renderHorizontalMap() {\r\n    const tileMap = [];\r\n\r\n    // Standard horizontal board. Used for landscape orientation.\r\n    for (let y = 0; y < this.state.boardHeight; y++) {\r\n      tileMap[y] = (\r\n        <div key={\"board-hori-row\" + y}>\r\n          {this.state.tiles\r\n            .slice(\r\n              (y + 1) * (this.state.boardWidth + 2) + 1,\r\n              (y + 2) * (this.state.boardWidth + 2) - 1\r\n            )\r\n            .map((i) => this.renderTile(i))}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return tileMap;\r\n  }\r\n\r\n  renderVerticalMap() {\r\n    const tileMap = [];\r\n\r\n    // Rotated vertical board. Used for portrait orientation.\r\n    for (let x = 0; x < this.state.boardWidth; x++) {\r\n      tileMap[x] = (\r\n        <div key={\"board-vert-row\" + x}>\r\n          {this.state.tiles\r\n            .slice(\r\n              this.state.boardWidth + 2,\r\n              (this.state.boardWidth + 2) * (this.state.boardHeight + 1)\r\n            )\r\n            .filter(\r\n              (_el, index) => index % (this.state.boardWidth + 2) === x + 1\r\n            )\r\n            .reverse()\r\n            .map((i) => this.renderTile(i))}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return tileMap;\r\n  }\r\n\r\n  renderTile(tileobj) {\r\n    return (\r\n      <Tile\r\n        tile={tileobj.char}\r\n        key={tileobj.id}\r\n        glyph={!this.state.useEmoji}\r\n        selected={tileobj.id === this.state.selectedTile}\r\n        hinted={this.state.hintedTiles.includes(tileobj)}\r\n        onClick={() => this.handleTileClick(tileobj.id)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div>\r\n          <div\r\n            className={`game-board game-board-horizontal ${\r\n              this.state.useEmoji ? \"game-board-emoji\" : \"game-board-glyph\"\r\n            }`}\r\n          >\r\n            {this.renderHorizontalMap()}\r\n          </div>\r\n          <div\r\n            className={`game-board game-board-vertical ${\r\n              this.state.useEmoji ? \"game-board-emoji\" : \"game-board-glyph\"\r\n            }`}\r\n          >\r\n            {this.renderVerticalMap()}\r\n          </div>\r\n          <div>\r\n            <button\r\n              onClick={() =>\r\n                this.setState((state) => ({ useEmoji: !state.useEmoji }))\r\n              }\r\n            >\r\n              Change tile type\r\n            </button>\r\n            <button onClick={() => this.generateBoard()}>New board</button>\r\n            <button onClick={() => this.generateBoard(this.state.seed)}>\r\n              Reset board\r\n            </button>\r\n          </div>\r\n          <div>Board #{this.state.seed}</div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import './App.css';\n\nimport Game from './components/Game.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}