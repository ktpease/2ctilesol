{"version":3,"sources":["game/Tile.js","game/PathNode.js","game/Game.js","game/PathLogic.js","App.js","reportWebVitals.js","index.js"],"names":["Tile","props","tileNum","parseInt","tile","isNaN","glyph","className","tileStatusClass","selected","hinted","tileColorClass","pointer","fade","onClick","String","fromCodePoint","PathNode","node","length","nodeClass","forEach","dir","index","concat","Game","state","useEmoji","boardWidth","boardHeight","seed","tiles","selectedTile","hintedTiles","pathingTiles","pathingTilesAlt","useAltPathingTiles","showMatchingTiles","allowDeselect","horizontalTileMap","verticalTileMap","this","checkEmojiMode","generateBoard","window","navigator","test","userAgent","setState","width","height","allValidTiles","newWidth","newHeight","id","char","chardupe","finalSeed","seedrandom","int32","seededRng","tileCharUsed","Array","keys","randValue","includes","i","Math","floor","x","push","inRemovalAnim","y","console","log","generateHorizontalMap","generateVerticalMap","tileId","debug","path","firstTile","secondTile","board","boardWidthWithEdges","boardHeightWithEdges","paths","simplestPath","tileXdelta","tileYdelta","DEBUG_pathsEaten","segment","unshift","pop","at","curSegment","lastTile","nextTile","newPath","map","checkSimplestPath","slice","newTiles","line","filter","t","tileMap","renderTile","_el","reverse","tileobj","handleTileClick","renderHorizontalMap","renderVerticalMap","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b34b530.chunk.js","sourcesContent":["export default function Tile(props) {\r\n  // Number between 0-42, corresponding to the Mahjong Tiles Unicode block.\r\n  const tileNum = parseInt(props.tile, 10);\r\n\r\n  // Check if tile is valid.\r\n  if (isNaN(tileNum) || tileNum < 0 || tileNum >= 43) {\r\n    return props.glyph ? (\r\n      <span className=\"game-tile-glyph game-tile-empty\">&#x1F02B;&#xFE0E;</span>\r\n    ) : (\r\n      <span className=\"game-tile-emoji game-tile-empty\">&#x1F02B;</span>\r\n    );\r\n  }\r\n\r\n  let tileStatusClass = \"\";\r\n\r\n  if (props.selected) tileStatusClass = \"game-tile-selected\";\r\n  else if (props.hinted) tileStatusClass = \"game-tile-hinted\";\r\n\r\n  if (props.glyph) {\r\n    // If the font uses the glyph variant, give them a colorized border.\r\n    let tileColorClass = \"\";\r\n\r\n    if ((tileNum >= 7 && tileNum <= 15) || tileNum === 4) {\r\n      tileColorClass = \"game-tile-glyph-red\";\r\n    } else if ((tileNum >= 16 && tileNum <= 24) || tileNum === 5) {\r\n      tileColorClass = \"game-tile-glyph-green\";\r\n    } else if ((tileNum >= 25 && tileNum <= 33) || tileNum === 6) {\r\n      tileColorClass = \"game-tile-glyph-blue\";\r\n    } else if (tileNum >= 34 && tileNum <= 37) {\r\n      tileColorClass = \"game-tile-glyph-flowers\";\r\n    } else if (tileNum >= 38 && tileNum <= 41) {\r\n      tileColorClass = \"game-tile-glyph-seasons\";\r\n    }\r\n\r\n    return (\r\n      <span\r\n        className={`game-tile-glyph ${tileColorClass} ${tileStatusClass} ${\r\n          props.pointer ? \"game-tile-pointer\" : \"\"\r\n        } ${props.fade ? \"game-tile-anim-fadeout\" : \"\"}`}\r\n        onClick={props.onClick}\r\n      >\r\n        {String.fromCodePoint(0x1f000 + tileNum)}&#xFE0E;\r\n      </span>\r\n    );\r\n  } else {\r\n    return (\r\n      <span\r\n        className={`game-tile-emoji ${tileStatusClass} ${\r\n          props.pointer ? \"game-tile-pointer\" : \"\"\r\n        } ${props.fade ? \"game-tile-anim-fadeout\" : \"\"}`}\r\n        onClick={props.onClick}\r\n      >\r\n        {String.fromCodePoint(0x1f000 + tileNum)}\r\n      </span>\r\n    );\r\n  }\r\n}\r\n","export default function PathNode(props) {\r\n  if (props.node && props.node.length > 0) {\r\n    let nodeClass = \"\";\r\n\r\n    props.node.forEach((dir, index) => {\r\n      if (index === 0) nodeClass = \"game-path-\";\r\n      nodeClass = nodeClass.concat(dir);\r\n    });\r\n\r\n    return <span className={`game-path ${nodeClass} game-path-anim-fadeout`} />;\r\n  }\r\n\r\n  return null;\r\n}\r\n","import React from \"react\";\r\nimport seedrandom from \"seedrandom\";\r\n\r\nimport { checkSimplestPath } from \"./PathLogic.js\";\r\n\r\nimport Tile from \"./Tile.js\";\r\nimport PathNode from \"./PathNode.js\";\r\n\r\nimport \"./Game.css\";\r\n\r\nexport default class Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      useEmoji: false,\r\n      boardWidth: 17,\r\n      boardHeight: 8,\r\n      seed: 1,\r\n      tiles: [],\r\n      selectedTile: null,\r\n      hintedTiles: [],\r\n      pathingTiles: [],\r\n      pathingTilesAlt: [],\r\n      useAltPathingTiles: false,\r\n      showMatchingTiles: true,\r\n      allowDeselect: true,\r\n      horizontalTileMap: [],\r\n      verticalTileMap: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.checkEmojiMode();\r\n    this.generateBoard();\r\n  }\r\n\r\n  checkEmojiMode() {\r\n    // Currently, all majong tiles are Non-RGI with the exception of Red Dragon,\r\n    // and the only system font that supports all of these tiles as emojis is the\r\n    // Segoe UI Emoji family, included in Windows 10+.\r\n    //\r\n    // It is unlikely that future Unicode Emoji specifications will support\r\n    // all tiles as RGI, and I'm unsure if other system font providers will\r\n    // support them. So for now, we'll just assume that only desktop Windows 10+\r\n    // can run the emoji mode.\r\n    //\r\n    // If any other system or custom font providers begin supporting this, just\r\n    // please make sure they're front-facing (looking at you, Noto Emoji).\r\n\r\n    // If we don't care that it breaks previous Windows versions, we can just\r\n    // use the is-windows package. But for compatibility, we'll just check the\r\n    // browser's user agent string.\r\n    //\r\n    // Conveniently, Windows 10 and up have double-digit version numbers!\r\n    if (\r\n      window.navigator &&\r\n      /Windows NT \\d{2}/.test(window.navigator.userAgent)\r\n    ) {\r\n      this.setState({ useEmoji: true });\r\n    }\r\n  }\r\n\r\n  generateBoard(seed, width, height) {\r\n    const tiles = [],\r\n      allValidTiles = [];\r\n\r\n    const newWidth = width ? width : this.state.boardWidth,\r\n      newHeight = height ? height : this.state.boardHeight;\r\n\r\n    let id = 0,\r\n      char = -1,\r\n      chardupe = -1;\r\n\r\n    // Determine if we need to generate a random seed\r\n    // or use a pre-determined one from the seed argument.\r\n    // This will be used in both tile selection and board shuffling.\r\n    const finalSeed = isNaN(parseInt(seed, 10))\r\n      ? seedrandom().int32() >>> 0\r\n      : parseInt(seed, 10) >>> 0;\r\n\r\n    const seededRng = seedrandom(finalSeed);\r\n\r\n    // Generate which tiles are used. This is done by listing all\r\n    // possible tiles (without duplicates), then shuffling with\r\n    // a simple Fisher-Yates shuffle.\r\n    let tileCharUsed = [...Array(34).keys()],\r\n      randValue = 0;\r\n\r\n    // Chrome for Android has a bug where it'll not respect VS15/U+FE0E and\r\n    // always render the Red Dragon tile as emoji. Until it is fixed, replace\r\n    // the Red Dragon with the unused Joker tile.\r\n    if (\r\n      window.navigator &&\r\n      window.navigator.userAgent.includes(\"Chrome\") &&\r\n      window.navigator.userAgent.includes(\"Mobile\")\r\n    ) {\r\n      tileCharUsed[4] = 42;\r\n    }\r\n\r\n    for (let i = tileCharUsed.length - 1; i > 0; i--) {\r\n      randValue = Math.floor(seededRng() * (i + 1));\r\n\r\n      char = tileCharUsed[i];\r\n      tileCharUsed[i] = tileCharUsed[randValue];\r\n      tileCharUsed[randValue] = char;\r\n    }\r\n\r\n    // Top outer edge.\r\n    for (let x = 0; x < newWidth + 2; x++)\r\n      id = tiles.push({ id: id, char: null, inRemovalAnim: false });\r\n\r\n    // Generate the initial unshuffled layout of tiles.\r\n    for (let y = 0; y < newHeight; y++) {\r\n      // Left outer edge.\r\n      id = tiles.push({ id: id, char: null, inRemovalAnim: false });\r\n\r\n      for (let x = 0; x < newWidth; x++) {\r\n        if ((chardupe = (chardupe + 1) % 4) === 0) {\r\n          char = (char + 1) % tileCharUsed.length;\r\n        }\r\n\r\n        allValidTiles.push(id);\r\n        id = tiles.push({\r\n          id: id,\r\n          char: tileCharUsed[char],\r\n          inRemovalAnim: false,\r\n        });\r\n      }\r\n\r\n      // Right outer edge.\r\n      id = tiles.push({ id: id, char: null, inRemovalAnim: false });\r\n    }\r\n\r\n    // Bottom outer edge.\r\n    for (let x = 0; x < newWidth + 2; x++)\r\n      id = tiles.push({ id: id, char: null, inRemovalAnim: false });\r\n\r\n    // Shuffle the board using a simple Fisher-Yates shuffle.\r\n    for (let i = allValidTiles.length - 1; i > 0; i--) {\r\n      randValue = Math.floor(seededRng() * (i + 1));\r\n\r\n      char = tiles[allValidTiles[i]].char;\r\n      tiles[allValidTiles[i]].char = tiles[allValidTiles[randValue]].char;\r\n      tiles[allValidTiles[randValue]].char = char;\r\n    }\r\n\r\n    console.log(`Game board seed is ${finalSeed}`);\r\n\r\n    this.setState(\r\n      {\r\n        tiles: tiles,\r\n        boardWidth: newWidth,\r\n        boardHeight: newHeight,\r\n        seed: finalSeed,\r\n        selectedTile: null,\r\n        hintedTiles: [],\r\n        pathingTiles: [],\r\n        pathingTilesAlt: [],\r\n      },\r\n      () => {\r\n        this.generateHorizontalMap();\r\n        this.generateVerticalMap();\r\n      }\r\n    );\r\n  }\r\n\r\n  handleTileClick(tileId) {\r\n    // Don't click empty or tiles being removed.\r\n    if (\r\n      this.state.tiles[tileId].char === null ||\r\n      this.state.tiles[tileId].inRemovalAnim === true\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // Clicking the same tile either de-selects the tile or does nothing.\r\n    if (this.state.selectedTile === tileId) {\r\n      if (this.state.allowDeselect === true) {\r\n        this.setState({ selectedTile: null, hintedTiles: [] });\r\n        console.debug(`Unclicked ${tileId}`);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    console.debug(`Clicked ${tileId}`);\r\n\r\n    // If selecting a second tile, check to make sure it matches the first,\r\n    // then check the pathing to see if it's valid, then clear valid matches.\r\n    if (\r\n      this.state.selectedTile !== null &&\r\n      this.state.tiles[tileId].char ===\r\n        this.state.tiles[this.state.selectedTile].char\r\n    ) {\r\n      const path = checkSimplestPath(\r\n        tileId,\r\n        this.state.selectedTile,\r\n        this.state.tiles.slice(),\r\n        this.state.boardWidth,\r\n        this.state.boardHeight\r\n      );\r\n\r\n      if (path !== null) {\r\n        console.debug(path);\r\n\r\n        // Create an updated board, first by removing the tiles in its\r\n        // fadeout animation, then putting the match in that same animation.\r\n        const newTiles = this.state.tiles.slice();\r\n\r\n        newTiles.forEach((tile) => {\r\n          if (tile.inRemovalAnim === true) {\r\n            tile.inRemovalAnim = false;\r\n            tile.char = null;\r\n          }\r\n        });\r\n\r\n        newTiles[tileId].inRemovalAnim = true;\r\n        newTiles[this.state.selectedTile].inRemovalAnim = true;\r\n\r\n        // Generate the pathing tiles for display.\r\n        const pathingTiles = this.state.tiles.map(() => []);\r\n\r\n        path.forEach((line) => {\r\n          line.segment.forEach((node) => {\r\n            pathingTiles[node].push(line.dir);\r\n          });\r\n        });\r\n\r\n        pathingTiles[this.state.selectedTile].push(\"-start\");\r\n        pathingTiles[tileId].push(\"-end\");\r\n\r\n        this.setState({\r\n          tiles: newTiles,\r\n          selectedTile: null,\r\n          hintedTiles: [],\r\n        });\r\n\r\n        // Switch between primary and alternate pathing maps. This is used\r\n        // as a makeshift solution to consecutive matches using the same tile\r\n        // path, as the CSS animation doesn't get reset.\r\n        if (this.state.useAltPathingTiles === true)\r\n          this.setState({\r\n            pathingTiles: this.state.tiles.map(() => []),\r\n            pathingTilesAlt: pathingTiles,\r\n            useAltPathingTiles: false,\r\n          });\r\n        else\r\n          this.setState({\r\n            pathingTiles: pathingTiles,\r\n            pathingTilesAlt: this.state.tiles.map(() => []),\r\n            useAltPathingTiles: true,\r\n          });\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Update the hinting system, if it's enabled.\r\n    if (this.state.showMatchingTiles === true) {\r\n      const hintedTiles = this.state.tiles.filter(\r\n        (t) => t.char === this.state.tiles[tileId].char\r\n      );\r\n\r\n      this.setState({ hintedTiles: hintedTiles, selectedTile: tileId });\r\n      return;\r\n    }\r\n\r\n    this.setState({ selectedTile: tileId });\r\n  }\r\n\r\n  generateHorizontalMap() {\r\n    const tileMap = [];\r\n\r\n    // Standard horizontal board. Used for landscape orientation.\r\n    for (let y = 0; y < this.state.boardHeight + 2; y++) {\r\n      tileMap[y] = this.state.tiles.slice(\r\n        y * (this.state.boardWidth + 2),\r\n        (y + 1) * (this.state.boardWidth + 2)\r\n      );\r\n    }\r\n\r\n    this.setState({ horizontalTileMap: tileMap });\r\n  }\r\n\r\n  renderHorizontalMap() {\r\n    const tileMap = [];\r\n\r\n    if (typeof this.state.horizontalTileMap === \"undefined\") {\r\n      return;\r\n    }\r\n\r\n    for (let y = 0; y < this.state.horizontalTileMap.length; y++) {\r\n      tileMap[y] = (\r\n        <div key={\"board-hori-row\" + y}>\r\n          {this.state.horizontalTileMap[y].map((i) => this.renderTile(i))}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return tileMap;\r\n  }\r\n\r\n  generateVerticalMap() {\r\n    const tileMap = [];\r\n\r\n    // Rotated vertical board. Used for portrait orientation.\r\n    for (let x = 0; x < this.state.boardWidth + 2; x++) {\r\n      tileMap[x] = this.state.tiles\r\n        .filter((_el, index) => index % (this.state.boardWidth + 2) === x)\r\n        .reverse();\r\n    }\r\n\r\n    this.setState({ verticalTileMap: tileMap });\r\n  }\r\n\r\n  renderVerticalMap() {\r\n    const tileMap = [];\r\n\r\n    if (typeof this.state.verticalTileMap === \"undefined\") {\r\n      return;\r\n    }\r\n\r\n    for (let x = 0; x < this.state.verticalTileMap.length; x++) {\r\n      tileMap[x] = (\r\n        <div key={\"board-vert-row\" + x}>\r\n          {this.state.verticalTileMap[x].map((i) => this.renderTile(i))}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return tileMap;\r\n  }\r\n\r\n  renderTile(tileobj) {\r\n    return (\r\n      <>\r\n        <Tile\r\n          tile={tileobj.char}\r\n          key={tileobj.id}\r\n          glyph={!this.state.useEmoji}\r\n          selected={tileobj.id === this.state.selectedTile}\r\n          hinted={\r\n            this.state.hintedTiles.includes(tileobj) && !tileobj.inRemovalAnim\r\n          }\r\n          fade={tileobj.inRemovalAnim}\r\n          onClick={() => this.handleTileClick(tileobj.id)}\r\n        />\r\n        <PathNode\r\n          key={\"node\" + tileobj.id}\r\n          node={this.state.pathingTiles[tileobj.id]}\r\n        />\r\n        <PathNode\r\n          key={\"altnode\" + tileobj.id}\r\n          node={this.state.pathingTilesAlt[tileobj.id]}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div>\r\n          <div\r\n            className={`game-board game-board-horizontal ${\r\n              this.state.useEmoji ? \"game-board-emoji\" : \"game-board-glyph\"\r\n            }`}\r\n          >\r\n            {this.renderHorizontalMap()}\r\n          </div>\r\n          <div\r\n            className={`game-board game-board-vertical ${\r\n              this.state.useEmoji ? \"game-board-emoji\" : \"game-board-glyph\"\r\n            }`}\r\n          >\r\n            {this.renderVerticalMap()}\r\n          </div>\r\n          <div>\r\n            <button\r\n              onClick={() =>\r\n                this.setState((state) => ({ useEmoji: !state.useEmoji }))\r\n              }\r\n            >\r\n              Change tile type\r\n            </button>\r\n            <button onClick={() => this.generateBoard(this.state.seed)}>\r\n              Reset board\r\n            </button>\r\n          </div>\r\n          <div>\r\n            <button onClick={() => this.generateBoard(null, 8, 5)}>\r\n              New board (easy)\r\n            </button>\r\n            <button onClick={() => this.generateBoard(null, 12, 7)}>\r\n              New board (medium)\r\n            </button>\r\n            <button onClick={() => this.generateBoard(null, 17, 8)}>\r\n              New board (hard)\r\n            </button>\r\n          </div>\r\n          <div>Board #{this.state.seed}</div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","/**\r\n * Check the simplest (i.e. least amount of segments) nikakudori path between\r\n * two tiles on the provided game board.\r\n *\r\n * This utilizes an iterative depth-first search approach, with special modifications\r\n * to account for the limited amount of line segments.\r\n *\r\n * @param {!number} firstTile The tile index to start from\r\n * @param {!number} secondTile The tile index to end up on\r\n * @param {!{{<id: number, char: number>}}[]} board The tiles\r\n * themselves, which should be (1 + boardWidth + 1) * (1 + boardHeight + 1)\r\n * to account for the edges.\r\n * @param {!number} boardWidth Width of the board, excluding the edges.\r\n * @param {!number} boardHeight Height of the board, excluding the edges.\r\n * @returns {?{{<segment: number[], dir: string>}}[]} An array of line segments showing\r\n * one of the simplest paths. Segments are list of tile indexes in order.\r\n * Dir can be \"U\", \"D\", \"L\", or \"R\".\r\n */\r\nexport function checkSimplestPath(\r\n  firstTile,\r\n  secondTile,\r\n  board,\r\n  boardWidth,\r\n  boardHeight\r\n) {\r\n  if (firstTile === secondTile) return null;\r\n\r\n  const boardWidthWithEdges = boardWidth + 2,\r\n    boardHeightWithEdges = boardHeight + 2;\r\n\r\n  let paths = [],\r\n    simplestPath = null;\r\n\r\n  const tileXdelta =\r\n    (secondTile % boardWidthWithEdges) - (firstTile % boardWidthWithEdges);\r\n  const tileYdelta =\r\n    (secondTile -\r\n      (secondTile % boardWidthWithEdges) -\r\n      (firstTile - (firstTile % boardWidthWithEdges))) /\r\n    boardWidthWithEdges;\r\n\r\n  let DEBUG_pathsEaten = 0;\r\n  console.debug(`tile X delta: ${tileXdelta}`);\r\n  console.debug(`tile Y delta: ${tileYdelta}`);\r\n\r\n  // Do not check opposite direction if in the same row or column.\r\n\r\n  if (tileYdelta !== 0 || tileXdelta > 0) {\r\n    paths.push([{ segment: [firstTile], dir: \"R\" }]);\r\n  }\r\n\r\n  if (tileYdelta !== 0 || tileXdelta < 0) {\r\n    if (tileXdelta < 0) paths.push([{ segment: [firstTile], dir: \"L\" }]);\r\n    else paths.unshift([{ segment: [firstTile], dir: \"L\" }]);\r\n  }\r\n\r\n  if (tileXdelta !== 0 || tileYdelta > 0) {\r\n    if (tileYdelta >= 0) paths.push([{ segment: [firstTile], dir: \"D\" }]);\r\n    else paths.unshift([{ segment: [firstTile], dir: \"D\" }]);\r\n  }\r\n\r\n  if (tileXdelta !== 0 || tileYdelta < 0) {\r\n    if (tileYdelta < 0) paths.push([{ segment: [firstTile], dir: \"U\" }]);\r\n    else paths.push([{ segment: [firstTile], dir: \"U\" }]);\r\n  }\r\n\r\n  for (let i = 0; i < paths.length; i++) {\r\n    console.debug(paths[i]);\r\n  }\r\n\r\n  while (paths.length > 0) {\r\n    const path = paths.pop();\r\n    DEBUG_pathsEaten++;\r\n\r\n    console.debug(\r\n      `Checking path: ${path.at(-1).segment} | ${path.at(-1).dir} | length: ${\r\n        path.length\r\n      } | queue: ${paths.length}`\r\n    );\r\n\r\n    // If we already found a three-line path, we shouldn't look for more\r\n    // three-line paths.\r\n    if (simplestPath !== null && path.length === 3) {\r\n      console.debug(\"- Looking for less-line paths\");\r\n      continue;\r\n    }\r\n\r\n    const curSegment = path.at(-1);\r\n    const lastTile = curSegment.segment.at(-1);\r\n    let nextTile;\r\n\r\n    switch (curSegment.dir) {\r\n      case \"R\":\r\n        nextTile = board[lastTile + 1];\r\n\r\n        // We found the path, or a simpler one!\r\n        if (nextTile.id === secondTile) {\r\n          console.debug(\"- Found simplest path?\");\r\n          curSegment.segment.push(nextTile.id);\r\n\r\n          // If it is a one-line or two-line path, it's one of the\r\n          // absolute shortest paths. We're done!\r\n          if (path.length < 3) {\r\n            console.debug(\"-- It is!\");\r\n            console.debug(`${DEBUG_pathsEaten} PATHS EATEN`);\r\n            return path;\r\n          }\r\n\r\n          console.debug(\"-- Maybe?\");\r\n          simplestPath = path;\r\n          continue;\r\n        }\r\n\r\n        // Obstruction in the path. Skip.\r\n        if (nextTile.char !== null && nextTile.inRemovalAnim !== true) {\r\n          console.debug(\"- Obstruction in path\");\r\n          continue;\r\n        }\r\n\r\n        curSegment.segment.push(nextTile.id);\r\n\r\n        // On first and second segment, check U if second tile is above and\r\n        // check D if the second tile is below.\r\n        // On second segment, only check if on same column.\r\n        if (\r\n          path.length < 3 &&\r\n          !(\r\n            path.length === 2 &&\r\n            secondTile % boardWidthWithEdges !==\r\n              nextTile.id % boardWidthWithEdges\r\n          )\r\n        ) {\r\n          if (secondTile < nextTile.id) {\r\n            console.debug(\"- Add path U\");\r\n            const newPath = path.map((i) => ({\r\n              segment: [].concat(i.segment),\r\n              dir: i.dir,\r\n            }));\r\n            newPath.push({ segment: [nextTile.id], dir: \"U\" });\r\n            if (tileYdelta < 0) paths.push(newPath);\r\n            else paths.unshift(newPath);\r\n          } else if (secondTile > nextTile.id) {\r\n            console.debug(\"- Add path D\");\r\n            const newPath = path.map((i) => ({\r\n              segment: [].concat(i.segment),\r\n              dir: i.dir,\r\n            }));\r\n            newPath.push({ segment: [nextTile.id], dir: \"D\" });\r\n            if (tileYdelta >= 0) paths.push(newPath);\r\n            else paths.unshift(newPath);\r\n          }\r\n        }\r\n\r\n        if (\r\n          (path.length === 2 &&\r\n            secondTile % boardWidthWithEdges <\r\n              nextTile.id % boardWidthWithEdges) ||\r\n          nextTile.id % boardWidthWithEdges === boardWidthWithEdges - 1\r\n        ) {\r\n          console.debug(\"- Do not proceed further, will miss\");\r\n          continue;\r\n        }\r\n\r\n        console.debug(\"- Continuing path\");\r\n        if (tileXdelta >= 0) paths.push(path);\r\n        else paths.unshift(path);\r\n        continue;\r\n      case \"L\":\r\n        nextTile = board[lastTile - 1];\r\n\r\n        // We found the path, or a simpler one!\r\n        if (nextTile.id === secondTile) {\r\n          console.debug(\"- Found simplest path\");\r\n          curSegment.segment.push(nextTile.id);\r\n\r\n          // If it is a one-line or two-line path, it's one of the\r\n          // absolute shortest paths. We're done!\r\n          if (path.length < 3) {\r\n            console.debug(\"-- It is!\");\r\n            console.debug(`${DEBUG_pathsEaten} PATHS EATEN`);\r\n            return path;\r\n          }\r\n\r\n          console.debug(\"-- Maybe?\");\r\n          simplestPath = path;\r\n          continue;\r\n        }\r\n\r\n        // Obstruction in the path. Skip.\r\n        if (nextTile.char !== null && nextTile.inRemovalAnim !== true) {\r\n          console.debug(\"- Obstruction in path\");\r\n          continue;\r\n        }\r\n\r\n        curSegment.segment.push(nextTile.id);\r\n\r\n        // On first and second segment, check U if second tile is above and\r\n        // check D if the second tile is below.\r\n        // On second segment, only check if on same column.\r\n        if (\r\n          path.length < 3 &&\r\n          !(\r\n            path.length === 2 &&\r\n            secondTile % boardWidthWithEdges !==\r\n              nextTile.id % boardWidthWithEdges\r\n          )\r\n        ) {\r\n          if (secondTile < nextTile.id) {\r\n            console.debug(\"- Add path U\");\r\n            const newPath = path.map((i) => ({\r\n              segment: [].concat(i.segment),\r\n              dir: i.dir,\r\n            }));\r\n            newPath.push({ segment: [nextTile.id], dir: \"U\" });\r\n            if (tileYdelta < 0) paths.push(newPath);\r\n            else paths.unshift(newPath);\r\n          } else if (secondTile > nextTile.id) {\r\n            console.debug(\"- Add path D\");\r\n            const newPath = path.map((i) => ({\r\n              segment: [].concat(i.segment),\r\n              dir: i.dir,\r\n            }));\r\n            newPath.push({ segment: [nextTile.id], dir: \"D\" });\r\n            if (tileYdelta >= 0) paths.push(newPath);\r\n            else paths.unshift(newPath);\r\n          }\r\n        }\r\n\r\n        if (\r\n          (path.length === 2 &&\r\n            secondTile % boardWidthWithEdges >\r\n              nextTile.id % boardWidthWithEdges) ||\r\n          nextTile.id % boardWidthWithEdges === 0\r\n        ) {\r\n          console.debug(\"- Do not proceed further, will miss\");\r\n          continue;\r\n        }\r\n\r\n        console.debug(\"- Continuing path\");\r\n        if (tileXdelta < 0) paths.push(path);\r\n        else paths.unshift(path);\r\n        continue;\r\n      case \"D\":\r\n        nextTile = board[lastTile + boardWidthWithEdges];\r\n\r\n        // We found the path, or a simpler one!\r\n        if (nextTile.id === secondTile) {\r\n          console.debug(\"- Found simplest path\");\r\n          curSegment.segment.push(nextTile.id);\r\n\r\n          // If it is a one-line or two-line path, it's one of the\r\n          // absolute shortest paths. We're done!\r\n          if (path.length < 3) {\r\n            console.debug(\"-- It is!\");\r\n            console.debug(`${DEBUG_pathsEaten} PATHS EATEN`);\r\n            return path;\r\n          }\r\n\r\n          console.debug(\"-- Maybe?\");\r\n          simplestPath = path;\r\n          continue;\r\n        }\r\n\r\n        // Obstruction in the path. Skip.\r\n        if (nextTile.char !== null && nextTile.inRemovalAnim !== true) {\r\n          console.debug(\"- Obstruction in path\");\r\n          continue;\r\n        }\r\n\r\n        curSegment.segment.push(nextTile.id);\r\n\r\n        // On first and second segment, check L if second tile is left and\r\n        // check R if the second tile is right.\r\n        // On second segment, only check if on same row.\r\n        if (\r\n          path.length < 3 &&\r\n          !(\r\n            path.length === 2 &&\r\n            secondTile - (secondTile % boardWidthWithEdges) !==\r\n              nextTile.id - (nextTile.id % boardWidthWithEdges)\r\n          )\r\n        ) {\r\n          if (\r\n            secondTile % boardWidthWithEdges <\r\n            nextTile.id % boardWidthWithEdges\r\n          ) {\r\n            console.debug(\"- Add path L\");\r\n            const newPath = path.map((i) => ({\r\n              segment: [].concat(i.segment),\r\n              dir: i.dir,\r\n            }));\r\n            newPath.push({ segment: [nextTile.id], dir: \"L\" });\r\n            if (tileXdelta < 0) paths.push(newPath);\r\n            else paths.unshift(newPath);\r\n          } else if (\r\n            secondTile % boardWidthWithEdges >\r\n            nextTile.id % boardWidthWithEdges\r\n          ) {\r\n            console.debug(\"- Add path R\");\r\n            const newPath = path.map((i) => ({\r\n              segment: [].concat(i.segment),\r\n              dir: i.dir,\r\n            }));\r\n            newPath.push({ segment: [nextTile.id], dir: \"R\" });\r\n            if (tileXdelta >= 0) paths.push(newPath);\r\n            else paths.unshift(newPath);\r\n          }\r\n        }\r\n\r\n        if (\r\n          (path.length === 2 && secondTile < nextTile.id) ||\r\n          nextTile.id >= boardWidthWithEdges * (boardHeightWithEdges - 1)\r\n        ) {\r\n          console.debug(\"- Do not proceed further, will miss\");\r\n          continue;\r\n        }\r\n\r\n        console.debug(\"- Continuing path\");\r\n        if (tileYdelta >= 0) paths.push(path);\r\n        else paths.unshift(path);\r\n        continue;\r\n      case \"U\":\r\n        nextTile = board[lastTile - boardWidthWithEdges];\r\n\r\n        // We found the path, or a simpler one!\r\n        if (nextTile.id === secondTile) {\r\n          console.debug(\"- Found simplest path\");\r\n          curSegment.segment.push(nextTile.id);\r\n\r\n          // If it is a one-line or two-line path, it's one of the\r\n          // absolute shortest paths. We're done!\r\n          if (path.length < 3) {\r\n            console.debug(\"-- It is!\");\r\n            console.debug(`${DEBUG_pathsEaten} PATHS EATEN`);\r\n            return path;\r\n          }\r\n\r\n          console.debug(\"-- Maybe?\");\r\n          simplestPath = path;\r\n          continue;\r\n        }\r\n\r\n        // Obstruction in the path. Skip.\r\n        if (nextTile.char !== null && nextTile.inRemovalAnim !== true) {\r\n          console.debug(\"- Obstruction in path\");\r\n          continue;\r\n        }\r\n\r\n        curSegment.segment.push(nextTile.id);\r\n\r\n        // On first and second segment, check L if second tile is left and\r\n        // check R if the second tile is right.\r\n        // On second segment, only check if on same row.\r\n        if (\r\n          path.length < 3 &&\r\n          !(\r\n            path.length === 2 &&\r\n            secondTile - (secondTile % boardWidthWithEdges) !==\r\n              nextTile.id - (nextTile.id % boardWidthWithEdges)\r\n          )\r\n        ) {\r\n          if (\r\n            secondTile % boardWidthWithEdges <\r\n            nextTile.id % boardWidthWithEdges\r\n          ) {\r\n            console.debug(\"- Add path L\");\r\n            const newPath = path.map((i) => ({\r\n              segment: [].concat(i.segment),\r\n              dir: i.dir,\r\n            }));\r\n            newPath.push({ segment: [nextTile.id], dir: \"L\" });\r\n            if (tileXdelta < 0) paths.push(newPath);\r\n            else paths.unshift(newPath);\r\n          } else if (\r\n            secondTile % boardWidthWithEdges >\r\n            nextTile.id % boardWidthWithEdges\r\n          ) {\r\n            console.debug(\"- Add path R\");\r\n            const newPath = path.map((i) => ({\r\n              segment: [].concat(i.segment),\r\n              dir: i.dir,\r\n            }));\r\n            newPath.push({ segment: [nextTile.id], dir: \"R\" });\r\n            if (tileXdelta >= 0) paths.push(newPath);\r\n            else paths.unshift(newPath);\r\n          }\r\n        }\r\n\r\n        if (\r\n          (path.length === 2 && secondTile > nextTile.id) ||\r\n          nextTile.id < boardWidthWithEdges\r\n        ) {\r\n          console.debug(\"- Do not proceed further, will miss\");\r\n          continue;\r\n        }\r\n\r\n        console.debug(\"- Continuing path\");\r\n        if (tileYdelta < 0) paths.push(path);\r\n        else paths.unshift(path);\r\n        continue;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  console.debug(`${DEBUG_pathsEaten} PATHS EATEN`);\r\n  return simplestPath;\r\n}\r\n","import './App.css';\n\nimport Game from './game/Game.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}